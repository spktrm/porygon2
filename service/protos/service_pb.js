// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.servicev2.Action', null, global);
goog.exportSymbol('proto.servicev2.ClientMessage', null, global);
goog.exportSymbol('proto.servicev2.ClientMessage.MessageTypeCase', null, global);
goog.exportSymbol('proto.servicev2.ConnectMessage', null, global);
goog.exportSymbol('proto.servicev2.ErrorMessage', null, global);
goog.exportSymbol('proto.servicev2.GameState', null, global);
goog.exportSymbol('proto.servicev2.ResetMessage', null, global);
goog.exportSymbol('proto.servicev2.ServerMessage', null, global);
goog.exportSymbol('proto.servicev2.ServerMessage.MessageTypeCase', null, global);
goog.exportSymbol('proto.servicev2.StepMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.servicev2.ClientMessage.oneofGroups_);
};
goog.inherits(proto.servicev2.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.ClientMessage.displayName = 'proto.servicev2.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servicev2.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.Action.displayName = 'proto.servicev2.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.StepMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servicev2.StepMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.StepMessage.displayName = 'proto.servicev2.StepMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.ResetMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servicev2.ResetMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.ResetMessage.displayName = 'proto.servicev2.ResetMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.ConnectMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servicev2.ConnectMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.ConnectMessage.displayName = 'proto.servicev2.ConnectMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.servicev2.ServerMessage.oneofGroups_);
};
goog.inherits(proto.servicev2.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.ServerMessage.displayName = 'proto.servicev2.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servicev2.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.GameState.displayName = 'proto.servicev2.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servicev2.ErrorMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servicev2.ErrorMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servicev2.ErrorMessage.displayName = 'proto.servicev2.ErrorMessage';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.servicev2.ClientMessage.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.servicev2.ClientMessage.MessageTypeCase = {
  MESSAGE_TYPE_NOT_SET: 0,
  CONNECT: 3,
  STEP: 4,
  RESET: 5
};

/**
 * @return {proto.servicev2.ClientMessage.MessageTypeCase}
 */
proto.servicev2.ClientMessage.prototype.getMessageTypeCase = function() {
  return /** @type {proto.servicev2.ClientMessage.MessageTypeCase} */(jspb.Message.computeOneofCase(this, proto.servicev2.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    connect: (f = msg.getConnect()) && proto.servicev2.ConnectMessage.toObject(includeInstance, f),
    step: (f = msg.getStep()) && proto.servicev2.StepMessage.toObject(includeInstance, f),
    reset: (f = msg.getReset()) && proto.servicev2.ResetMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.ClientMessage}
 */
proto.servicev2.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.ClientMessage;
  return proto.servicev2.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.ClientMessage}
 */
proto.servicev2.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 3:
      var value = new proto.servicev2.ConnectMessage;
      reader.readMessage(value,proto.servicev2.ConnectMessage.deserializeBinaryFromReader);
      msg.setConnect(value);
      break;
    case 4:
      var value = new proto.servicev2.StepMessage;
      reader.readMessage(value,proto.servicev2.StepMessage.deserializeBinaryFromReader);
      msg.setStep(value);
      break;
    case 5:
      var value = new proto.servicev2.ResetMessage;
      reader.readMessage(value,proto.servicev2.ResetMessage.deserializeBinaryFromReader);
      msg.setReset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getConnect();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.servicev2.ConnectMessage.serializeBinaryToWriter
    );
  }
  f = message.getStep();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.servicev2.StepMessage.serializeBinaryToWriter
    );
  }
  f = message.getReset();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.servicev2.ResetMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.servicev2.ClientMessage.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servicev2.ClientMessage} returns this
 */
proto.servicev2.ClientMessage.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.servicev2.ClientMessage.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servicev2.ClientMessage} returns this
 */
proto.servicev2.ClientMessage.prototype.setGameId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ConnectMessage connect = 3;
 * @return {?proto.servicev2.ConnectMessage}
 */
proto.servicev2.ClientMessage.prototype.getConnect = function() {
  return /** @type{?proto.servicev2.ConnectMessage} */ (
    jspb.Message.getWrapperField(this, proto.servicev2.ConnectMessage, 3));
};


/**
 * @param {?proto.servicev2.ConnectMessage|undefined} value
 * @return {!proto.servicev2.ClientMessage} returns this
*/
proto.servicev2.ClientMessage.prototype.setConnect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.servicev2.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.servicev2.ClientMessage} returns this
 */
proto.servicev2.ClientMessage.prototype.clearConnect = function() {
  return this.setConnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servicev2.ClientMessage.prototype.hasConnect = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StepMessage step = 4;
 * @return {?proto.servicev2.StepMessage}
 */
proto.servicev2.ClientMessage.prototype.getStep = function() {
  return /** @type{?proto.servicev2.StepMessage} */ (
    jspb.Message.getWrapperField(this, proto.servicev2.StepMessage, 4));
};


/**
 * @param {?proto.servicev2.StepMessage|undefined} value
 * @return {!proto.servicev2.ClientMessage} returns this
*/
proto.servicev2.ClientMessage.prototype.setStep = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.servicev2.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.servicev2.ClientMessage} returns this
 */
proto.servicev2.ClientMessage.prototype.clearStep = function() {
  return this.setStep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servicev2.ClientMessage.prototype.hasStep = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResetMessage reset = 5;
 * @return {?proto.servicev2.ResetMessage}
 */
proto.servicev2.ClientMessage.prototype.getReset = function() {
  return /** @type{?proto.servicev2.ResetMessage} */ (
    jspb.Message.getWrapperField(this, proto.servicev2.ResetMessage, 5));
};


/**
 * @param {?proto.servicev2.ResetMessage|undefined} value
 * @return {!proto.servicev2.ClientMessage} returns this
*/
proto.servicev2.ClientMessage.prototype.setReset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.servicev2.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.servicev2.ClientMessage} returns this
 */
proto.servicev2.ClientMessage.prototype.clearReset = function() {
  return this.setReset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servicev2.ClientMessage.prototype.hasReset = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    rqid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    text: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.Action}
 */
proto.servicev2.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.Action;
  return proto.servicev2.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.Action}
 */
proto.servicev2.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRqid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRqid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 rqid = 1;
 * @return {number}
 */
proto.servicev2.Action.prototype.getRqid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servicev2.Action} returns this
 */
proto.servicev2.Action.prototype.setRqid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.servicev2.Action.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servicev2.Action} returns this
 */
proto.servicev2.Action.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.servicev2.Action.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.servicev2.Action} returns this
 */
proto.servicev2.Action.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.StepMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.StepMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.StepMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.StepMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: (f = msg.getAction()) && proto.servicev2.Action.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.StepMessage}
 */
proto.servicev2.StepMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.StepMessage;
  return proto.servicev2.StepMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.StepMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.StepMessage}
 */
proto.servicev2.StepMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.servicev2.Action;
      reader.readMessage(value,proto.servicev2.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.StepMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.StepMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.StepMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.StepMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.servicev2.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional Action action = 1;
 * @return {?proto.servicev2.Action}
 */
proto.servicev2.StepMessage.prototype.getAction = function() {
  return /** @type{?proto.servicev2.Action} */ (
    jspb.Message.getWrapperField(this, proto.servicev2.Action, 1));
};


/**
 * @param {?proto.servicev2.Action|undefined} value
 * @return {!proto.servicev2.StepMessage} returns this
*/
proto.servicev2.StepMessage.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.servicev2.StepMessage} returns this
 */
proto.servicev2.StepMessage.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servicev2.StepMessage.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.ResetMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.ResetMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.ResetMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ResetMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.ResetMessage}
 */
proto.servicev2.ResetMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.ResetMessage;
  return proto.servicev2.ResetMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.ResetMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.ResetMessage}
 */
proto.servicev2.ResetMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.ResetMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.ResetMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.ResetMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ResetMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.ConnectMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.ConnectMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.ConnectMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ConnectMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.ConnectMessage}
 */
proto.servicev2.ConnectMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.ConnectMessage;
  return proto.servicev2.ConnectMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.ConnectMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.ConnectMessage}
 */
proto.servicev2.ConnectMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.ConnectMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.ConnectMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.ConnectMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ConnectMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.servicev2.ServerMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.servicev2.ServerMessage.MessageTypeCase = {
  MESSAGE_TYPE_NOT_SET: 0,
  GAME_STATE: 1,
  ERROR: 2
};

/**
 * @return {proto.servicev2.ServerMessage.MessageTypeCase}
 */
proto.servicev2.ServerMessage.prototype.getMessageTypeCase = function() {
  return /** @type {proto.servicev2.ServerMessage.MessageTypeCase} */(jspb.Message.computeOneofCase(this, proto.servicev2.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameState: (f = msg.getGameState()) && proto.servicev2.GameState.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.servicev2.ErrorMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.ServerMessage}
 */
proto.servicev2.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.ServerMessage;
  return proto.servicev2.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.ServerMessage}
 */
proto.servicev2.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.servicev2.GameState;
      reader.readMessage(value,proto.servicev2.GameState.deserializeBinaryFromReader);
      msg.setGameState(value);
      break;
    case 2:
      var value = new proto.servicev2.ErrorMessage;
      reader.readMessage(value,proto.servicev2.ErrorMessage.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.servicev2.GameState.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.servicev2.ErrorMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameState game_state = 1;
 * @return {?proto.servicev2.GameState}
 */
proto.servicev2.ServerMessage.prototype.getGameState = function() {
  return /** @type{?proto.servicev2.GameState} */ (
    jspb.Message.getWrapperField(this, proto.servicev2.GameState, 1));
};


/**
 * @param {?proto.servicev2.GameState|undefined} value
 * @return {!proto.servicev2.ServerMessage} returns this
*/
proto.servicev2.ServerMessage.prototype.setGameState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.servicev2.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.servicev2.ServerMessage} returns this
 */
proto.servicev2.ServerMessage.prototype.clearGameState = function() {
  return this.setGameState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servicev2.ServerMessage.prototype.hasGameState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorMessage error = 2;
 * @return {?proto.servicev2.ErrorMessage}
 */
proto.servicev2.ServerMessage.prototype.getError = function() {
  return /** @type{?proto.servicev2.ErrorMessage} */ (
    jspb.Message.getWrapperField(this, proto.servicev2.ErrorMessage, 2));
};


/**
 * @param {?proto.servicev2.ErrorMessage|undefined} value
 * @return {!proto.servicev2.ServerMessage} returns this
*/
proto.servicev2.ServerMessage.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.servicev2.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.servicev2.ServerMessage} returns this
 */
proto.servicev2.ServerMessage.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servicev2.ServerMessage.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rqid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: msg.getState_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.GameState}
 */
proto.servicev2.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.GameState;
  return proto.servicev2.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.GameState}
 */
proto.servicev2.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRqid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRqid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getState_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.servicev2.GameState.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servicev2.GameState} returns this
 */
proto.servicev2.GameState.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 rqid = 2;
 * @return {number}
 */
proto.servicev2.GameState.prototype.getRqid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servicev2.GameState} returns this
 */
proto.servicev2.GameState.prototype.setRqid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes state = 3;
 * @return {!(string|Uint8Array)}
 */
proto.servicev2.GameState.prototype.getState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes state = 3;
 * This is a type-conversion wrapper around `getState()`
 * @return {string}
 */
proto.servicev2.GameState.prototype.getState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getState()));
};


/**
 * optional bytes state = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getState()`
 * @return {!Uint8Array}
 */
proto.servicev2.GameState.prototype.getState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getState()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.servicev2.GameState} returns this
 */
proto.servicev2.GameState.prototype.setState = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servicev2.ErrorMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.servicev2.ErrorMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servicev2.ErrorMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ErrorMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorMessage: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servicev2.ErrorMessage}
 */
proto.servicev2.ErrorMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servicev2.ErrorMessage;
  return proto.servicev2.ErrorMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servicev2.ErrorMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servicev2.ErrorMessage}
 */
proto.servicev2.ErrorMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servicev2.ErrorMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servicev2.ErrorMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servicev2.ErrorMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servicev2.ErrorMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error_message = 1;
 * @return {string}
 */
proto.servicev2.ErrorMessage.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.servicev2.ErrorMessage} returns this
 */
proto.servicev2.ErrorMessage.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.servicev2);
