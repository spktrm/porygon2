import { GenerationNum } from '@pkmn/types';
import { Protocol, Args, KWArgs } from '../index.js';

interface Generation {
    num: GenerationNum;
    abilities: API;
    items: API;
    moves: API;
    species: API;
    types: API;
}
interface API {
    get(name: string): Record<string, unknown> | undefined;
}
declare class Handler implements Required<Protocol.Handler<boolean>> {
    private readonly gen?;
    private readonly raw;
    constructor(gen?: Generation, raw?: boolean);
    '|init|'(args: Args['|init|']): boolean;
    '|title|'(args: Args['|title|']): boolean;
    '|users|'(args: Args['|users|']): boolean;
    '||'(args: Args['||']): boolean;
    '|html|'(args: Args['|html|']): boolean;
    '|pagehtml|'(args: Args['|pagehtml|']): boolean;
    '|uhtml|'(args: Args['|uhtml|']): boolean;
    '|uhtmlchange|'(args: Args['|uhtmlchange|']): boolean;
    '|join|'(args: Args['|join|']): boolean;
    '|leave|'(args: Args['|leave|']): boolean;
    '|name|'(args: Args['|name|']): boolean;
    '|chat|'(args: Args['|chat|']): boolean;
    '|notify|'(args: Args['|notify|']): any;
    '|:|'(args: Args['|:|']): boolean;
    '|t:|'(args: Args['|t:|']): boolean;
    '|c:|'(args: Args['|c:|']): boolean;
    '|battle|'(args: Args['|battle|']): boolean;
    '|popup|'(args: Args['|popup|']): boolean;
    '|pm|'(args: Args['|pm|']): boolean;
    '|usercount|'(args: Args['|usercount|']): boolean;
    '|nametaken|'(args: Args['|nametaken|']): boolean;
    '|challstr|'(args: Args['|challstr|']): boolean;
    '|customgroups|'(args: Args['|customgroups|']): boolean;
    '|updateuser|'(args: Args['|updateuser|']): boolean;
    '|formats|'(args: Args['|formats|']): boolean;
    '|updatesearch|'(args: Args['|updatesearch|']): boolean;
    '|message|'(args: Args['|message|']): boolean;
    '|updatechallenges|'(args: Args['|updatechallenges|']): boolean;
    '|queryresponse|'(args: Args['|queryresponse|']): boolean;
    '|unlink|'(args: Args['|unlink|']): boolean;
    '|raw|'(args: Args['|raw|']): boolean;
    '|warning|'(args: Args['|warning|']): boolean;
    '|error|'(args: Args['|error|']): boolean;
    '|bigerror|'(args: Args['|bigerror|']): boolean;
    '|chatmsg|'(args: Args['|chatmsg|']): boolean;
    '|chatmsg-raw|'(args: Args['|chatmsg-raw|']): boolean;
    '|controlshtml|'(args: Args['|controlshtml|']): boolean;
    '|fieldhtml|'(args: Args['|fieldhtml|']): boolean;
    '|debug|'(args: Args['|debug|']): boolean;
    '|deinit|'(args: Args['|deinit|']): boolean;
    '|selectorhtml|'(args: Args['|selectorhtml|']): boolean;
    '|refresh|'(args: Args['|refresh|']): boolean;
    '|tempnotify|'(args: Args['|tempnotify|']): boolean;
    '|tempnotifyoff|'(args: Args['|tempnotifyoff|']): boolean;
    '|noinit|'(args: Args['|noinit|']): boolean;
    '|hidelines|'(args: Args['|hidelines|']): boolean;
    '|expire|'(args: Args['|expire|']): boolean;
    '|askreg|'(args: Args['|askreg|']): boolean;
    '|tournament|create|'(args: Args['|tournament|create|']): boolean;
    '|tournament|update|'(args: Args['|tournament|update|']): boolean;
    '|tournament|updateEnd|'(args: Args['|tournament|updateEnd|']): boolean;
    '|tournament|error|'(args: Args['|tournament|error|']): boolean;
    '|tournament|forceend|'(args: Args['|tournament|forceend|']): boolean;
    '|tournament|join|'(args: Args['|tournament|join|']): boolean;
    '|tournament|leave|'(args: Args['|tournament|leave|']): boolean;
    '|tournament|replace|'(args: Args['|tournament|replace|']): boolean;
    '|tournament|start|'(args: Args['|tournament|start|']): boolean;
    '|tournament|disqualify|'(args: Args['|tournament|disqualify|']): boolean;
    '|tournament|battlestart|'(args: Args['|tournament|battlestart|']): boolean;
    '|tournament|battleend|'(args: Args['|tournament|battleend|']): boolean;
    '|tournament|end|'(args: Args['|tournament|end|']): boolean;
    '|tournament|scouting|'(args: Args['|tournament|scouting|']): boolean;
    '|tournament|autostart|'(args: Args['|tournament|autostart|']): boolean;
    '|tournament|autodq|'(args: Args['|tournament|autodq|']): boolean;
    '|player|'(args: Args['|player|']): boolean;
    '|teamsize|'(args: Args['|teamsize|']): boolean;
    '|gametype|'(args: Args['|gametype|']): boolean;
    '|gen|'(args: Args['|gen|']): boolean;
    '|custom|'(): boolean;
    '|tier|'(args: Args['|tier|']): boolean;
    '|rated|'(args: Args['|rated|']): boolean;
    '|seed|'(args: Args['|seed|']): boolean;
    '|rule|'(args: Args['|rule|']): boolean;
    '|teampreview|'(args: Args['|teampreview|']): boolean;
    '|updatepoke|'(args: Args['|updatepoke|']): boolean;
    '|clearpoke|'(args: Args['|clearpoke|']): boolean;
    '|poke|'(args: Args['|poke|']): boolean;
    '|start|'(args: Args['|start|']): boolean;
    '|done|'(args: Args['|done|']): boolean;
    '|request|'(args: Args['|request|']): boolean;
    '|sentchoice|'(args: Args['|sentchoice|']): boolean;
    '|inactive|'(args: Args['|inactive|']): boolean;
    '|inactiveoff|'(args: Args['|inactiveoff|']): boolean;
    '|upkeep|'(args: Args['|upkeep|']): boolean;
    '|turn|'(args: Args['|turn|']): boolean;
    '|win|'(args: Args['|win|']): boolean;
    '|tie|'(args: Args['|tie|']): boolean;
    '|move|'(args: Args['|move|'], kwArgs: KWArgs['|move|']): boolean;
    '|switch|'(args: Args['|switch|'], kwArgs: KWArgs['|switch|']): boolean;
    '|drag|'(args: Args['|drag|']): boolean;
    '|detailschange|'(args: Args['|detailschange|']): boolean;
    '|replace|'(args: Args['|replace|']): boolean;
    '|swap|'(args: Args['|swap|'], kwArgs: KWArgs['|swap|']): boolean;
    '|cant|'(args: Args['|cant|'], kwArgs: KWArgs['|cant|']): boolean;
    '|faint|'(args: Args['|faint|']): boolean;
    '|-formechange|'(args: Args['|-formechange|'], kwArgs: KWArgs['|-formechange|']): boolean;
    '|-fail|'(args: Args['|-fail|'], kwArgs: KWArgs['|-fail|']): boolean;
    '|-block|'(args: Args['|-block|'], kwArgs: KWArgs['|-block|']): boolean;
    '|-notarget|'(args: Args['|-notarget|']): boolean;
    '|-miss|'(args: Args['|-miss|']): boolean;
    '|-damage|'(args: Args['|-damage|'], kwArgs: KWArgs['|-damage|']): boolean;
    '|-heal|'(args: Args['|-heal|'], kwArgs: KWArgs['|-heal|']): boolean;
    '|-sethp|'(args: Args['|-sethp|'], kwArgs: KWArgs['|-sethp|']): boolean;
    '|-status|'(args: Args['|-status|'], kwArgs: KWArgs['|-status|']): boolean;
    '|-curestatus|'(args: Args['|-curestatus|'], kwArgs: KWArgs['|-curestatus|']): boolean;
    '|-cureteam|'(args: Args['|-cureteam|'], kwArgs: KWArgs['|-cureteam|']): boolean;
    '|-boost|'(args: Args['|-boost|'], kwArgs: KWArgs['|-boost|']): boolean;
    '|-unboost|'(args: Args['|-unboost|'], kwArgs: KWArgs['|-unboost|']): boolean;
    '|-setboost|'(args: Args['|-setboost|'], kwArgs: KWArgs['|-setboost|']): boolean;
    '|-swapboost|'(args: Args['|-swapboost|'], kwArgs: KWArgs['|-swapboost|']): boolean;
    '|-invertboost|'(args: Args['|-invertboost|'], kwArgs: KWArgs['|-invertboost|']): boolean;
    '|-clearboost|'(args: Args['|-clearboost|'], kwArgs: KWArgs['|-clearboost|']): boolean;
    '|-clearallboost|'(args: Args['|-clearallboost|'], kwArgs: KWArgs['|-clearallboost|']): boolean;
    '|-clearpositiveboost|'(args: Args['|-clearpositiveboost|']): boolean;
    '|-ohko|'(args: Args['|-ohko|']): boolean;
    '|-candynamax|'(args: Args['|-candynamax|']): boolean;
    '|-terastallize|'(args: Args['|-terastallize|']): boolean;
    '|-clearnegativeboost|'(args: Args['|-clearnegativeboost|'], kwArgs: KWArgs['|-clearnegativeboost|']): boolean;
    '|-copyboost|'(args: Args['|-copyboost|'], kwArgs: KWArgs['|-copyboost|']): boolean;
    '|-weather|'(args: Args['|-weather|'], kwArgs: KWArgs['|-weather|']): boolean;
    '|-fieldstart|'(args: Args['|-fieldstart|'], kwArgs: KWArgs['|-fieldstart|']): boolean;
    '|-fieldend|'(args: Args['|-fieldend|'], kwArgs: KWArgs['|-fieldend|']): boolean;
    '|-sidestart|'(args: Args['|-sidestart|'], kwArgs: KWArgs['|-sidestart|']): boolean;
    '|-sideend|'(args: Args['|-sideend|'], kwArgs: KWArgs['|-sideend|']): boolean;
    '|-swapsideconditions|'(args: Args['|-swapsideconditions|']): boolean;
    '|-start|'(args: Args['|-start|'], kwArgs: KWArgs['|-start|']): boolean;
    '|-end|'(args: Args['|-end|'], kwArgs: KWArgs['|-end|']): boolean;
    '|-crit|'(args: Args['|-crit|']): boolean;
    '|-supereffective|'(args: Args['|-supereffective|']): boolean;
    '|-resisted|'(args: Args['|-resisted|']): boolean;
    '|-immune|'(args: Args['|-immune|'], kwArgs: KWArgs['|-immune|']): boolean;
    '|-item|'(args: Args['|-item|'], kwArgs: KWArgs['|-item|']): boolean;
    '|-enditem|'(args: Args['|-enditem|'], kwArgs: KWArgs['|-enditem|']): boolean;
    '|-ability|'(args: Args['|-ability|'], kwArgs: KWArgs['|-ability|']): boolean;
    '|-endability|'(args: Args['|-endability|'], kwArgs: KWArgs['|-endability|']): boolean;
    '|-transform|'(args: Args['|-transform|'], kwArgs: KWArgs['|-transform|']): boolean;
    '|-mega|'(args: Args['|-mega|']): boolean;
    '|-primal|'(args: Args['|-primal|']): boolean;
    '|-burst|'(args: Args['|-burst|']): boolean;
    '|-zpower|'(args: Args['|-zpower|']): boolean;
    '|-zbroken|'(args: Args['|-zbroken|']): boolean;
    '|-activate|'(args: Args['|-activate|'], kwArgs: KWArgs['|-activate|']): boolean;
    '|-fieldactivate|'(args: Args['|-fieldactivate|']): boolean;
    '|-hint|'(args: Args['|-hint|']): boolean;
    '|-center|'(args: Args['|-center|']): boolean;
    '|-message|'(args: Args['|-message|']): boolean;
    '|-combine|'(args: Args['|-combine|']): boolean;
    '|-waiting|'(args: Args['|-waiting|']): boolean;
    '|-prepare|'(args: Args['|-prepare|']): boolean;
    '|-mustrecharge|'(args: Args['|-mustrecharge|']): boolean;
    '|-hitcount|'(args: Args['|-hitcount|']): boolean;
    '|-singlemove|'(args: Args['|-singlemove|'], kwArgs: KWArgs['|-singlemove|']): boolean;
    '|-singleturn|'(args: Args['|-singleturn|'], kwArgs: KWArgs['|-singleturn|']): boolean;
    '|-anim|'(args: Args['|-anim|'], kwArgs: KWArgs['|-anim|']): boolean;
    '|-nothing|'(args: string[]): boolean;
}
declare class Verifier {
    handler: Handler;
    raw?: Handler;
    static EXISTS: (d: {
        exists: boolean;
    }) => boolean;
    constructor(gen?: Generation, raw?: boolean);
    verify(data: string): string | undefined;
    verifyLine(line: string): {
        args: Protocol.ArgType;
        kwArgs: {};
    } | undefined;
    dispatch(args: Protocol.ArgType, kwArgs: Protocol.BattleArgsKWArgType, raw?: boolean): any;
}

export { Verifier };
