import {
  Protocol
} from "../chunk-XMMLYU6Z.mjs";

// src/verifier/index.ts
var QUERYTYPES = ["userdetails", "roomlist", "rooms", "laddertop", "roominfo", "savereplay", "debug"];
var GAMETYPES = ["singles", "doubles", "triples", "multi", "freeforall", "rotation"];
var PLAYERS = ["p1", "p2", "p3", "p4"];
var KWARGS = ["from", "of", "still", "silent"];
var STATUSES = ["slp", "psn", "brn", "frz", "par", "tox"];
var BOOSTS = ["atk", "def", "spa", "spd", "spe", "accuracy", "evasion"];
var REASONS = [...STATUSES, "partiallytrapped", "flinch", "nopp", "recharge"];
var BOOL_KWARGS = /* @__PURE__ */ new Set([
  "broken",
  "consumed",
  "damage",
  "eat",
  "fail",
  "fatigue",
  "forme",
  "heavy",
  "miss",
  "msg",
  "notarget",
  "ohko",
  "silent",
  "still",
  "thaw",
  "upkeep",
  "weak",
  "weaken",
  "zeffect",
  "already",
  "identify",
  "interrupt",
  "multiple",
  "partiallytrapped",
  "prepare",
  "fromitem",
  "persistent",
  "source"
]);
var ABILITY_KWARGS = ["ability", "ability2"];
var MOVE_KWARGS = ["block"];
var ITEM_KWARGS = ["item"];
var NAME_KWARGS = ["name", "wisher"];
var BARE_EFFECTS = ["Dynamax", "Recoil"];
var POKE_ITEMS = ["item", "mail", ""];
var WEATHER = [
  "RainDance",
  "Sandstorm",
  "SunnyDay",
  "Hail",
  "PrimordialSea",
  "DesolateLand",
  "DeltaStream",
  "Snow"
];
var FIELD_CONDITIONS = ["Misty Terrain"];
var SIDE_CONDITIONS = [
  "Mist",
  "Spikes",
  "Light Screen",
  "Reflect",
  "Sticky Web",
  "Stealth Rock",
  "Toxic Spikes",
  "Safeguard",
  "G-Max Volcalith",
  "G-Max Wildfire",
  "G-Max Cannonade",
  "G-Max Steelsurge",
  "G-Max Vine Lash",
  "Grass Pledge",
  "Water Pledge",
  "Fire Pledge",
  "Aurora Veil"
];
var STAT_DISPLAY_NAMES = ["Attack", "Defense"];
var SSA = ["Shell Side Arm Physical", "Shell Side Arm Special"];
var IVY_CUDGEL = ["Ivy Cudgel Water", "Ivy Cudgel Fire", "Ivy Cudgel Rock"];
function verifyRoomID(roomid) {
  return /^[-a-z0-9]+$/.test(roomid);
}
function verifyID(id) {
  return /^[a-z0-9]+$/.test(id);
}
function verifyName(name) {
  return !!name && !verifyID(name);
}
function verifyStatDisplayName(name) {
  return STAT_DISPLAY_NAMES.includes(name);
}
function verifyWeather(name) {
  return WEATHER.includes(name);
}
function verifyFieldCondition(name) {
  return FIELD_CONDITIONS.includes(name);
}
function verifySideCondition(name) {
  return SIDE_CONDITIONS.includes(name);
}
function verifyType(name, gen) {
  if (!gen)
    return verifyName(name);
  return verifyName(name) && !!gen.types.get(name);
}
function verifyTypes(types, gen) {
  if (!gen)
    return verifyName(types);
  const [type1, type2] = types.split("/");
  return verifyType(type1, gen) && (!type2 || verifyType(type2, gen));
}
function verifyAbilityName(name, gen) {
  return verifyName(name) && (!gen || name === "As One" || !!gen.abilities.get(name));
}
function verifyItemName(name, gen) {
  return verifyName(name) && (!gen || !!gen.items.get(name));
}
function verifyMoveName(name, gen) {
  return verifyName(name) && (!gen || !!gen.moves.get(name) || name.startsWith("Z-") && verifyMoveName(name.slice(2), gen));
}
function verifyAnimationName(name, gen) {
  return verifyName(name) && (!gen || IVY_CUDGEL.includes(name) || SSA.includes(name) || name === "Fickle Beam All Out" || verifyMoveName(name, gen));
}
function verifySpeciesName(name, gen) {
  return verifyName(name) && (!gen || !!gen.species.get(name));
}
function verifyEffectName(name, gen) {
  if (name.includes(":")) {
    if (name.startsWith("ability:")) {
      return verifyAbilityName(name.slice(8).trim(), gen);
    } else if (name.startsWith("item:")) {
      return verifyItemName(name.slice(5).trim(), gen);
    } else if (name.startsWith("move:")) {
      return verifyMoveName(name.slice(5).trim(), gen);
    } else if (name.startsWith("pokemon:")) {
      return verifySpeciesName(name.slice(8).trim(), gen);
    } else {
      return false;
    }
  }
  return verifyID(name) || BARE_EFFECTS.includes(name);
}
function verifyMoveEffectName(name, gen) {
  return name.startsWith("move:") && verifyMoveName(name.slice(5).trim(), gen);
}
function verifyTimestamp(timestamp) {
  return /^\d+$/.test(timestamp);
}
function verifyJSON(json) {
  try {
    JSON.parse(json);
    return true;
  } catch (e) {
    return false;
  }
}
function verifyNum(num) {
  return !isNaN(+num);
}
function verifyPokemonIdent(ident) {
  return /^p[1234][abc]?: [^|]{1,25}$/.test(ident);
}
function verifyPokemonDetails(details, gen) {
  const m = /^([^|]{1,25}?)(, L\d{0,3})?(, [MF])?(, shiny)?$/.exec(details);
  if (!m)
    return false;
  return !gen || !!gen.species.get(m[1]);
}
function verifyPokemonHPStatus(hpstatus) {
  return hpstatus === "0 fnt" || /^\d+\/\d+( (par|brn|slp|frz|tox|psn))?$/.test(hpstatus);
}
function verifyPlayer(player) {
  return PLAYERS.includes(player);
}
function verifySide(side) {
  return /^p[1234]: [^|]{1,25}$/.test(side);
}
function verifyStatusName(status) {
  return STATUSES.includes(status);
}
function verifyBoostID(boost) {
  return BOOSTS.includes(boost);
}
function verifyBoostIDs(boosts) {
  return boosts.split(", ").every((boost) => verifyBoostID(boost));
}
function verifyKWArgs(kwArgs, keys, gen) {
  for (const k in kwArgs) {
    const key = k;
    if (!keys.includes(key))
      return false;
    if (!verifyKWArg(key, kwArgs[key], gen))
      return false;
  }
  return true;
}
function verifyKWArg(k, v, gen) {
  if (v === void 0)
    return true;
  if (BOOL_KWARGS.has(k))
    return v === true;
  if (NAME_KWARGS.includes(k))
    return verifyName(v);
  if (ABILITY_KWARGS.includes(k)) {
    return v === "" || verifyAbilityName(v, gen);
  }
  if (ITEM_KWARGS.includes(k))
    return verifyItemName(v, gen);
  if (MOVE_KWARGS.includes(k))
    return verifyMoveName(v, gen);
  if (k === "of")
    return v === "" || verifyPokemonIdent(v);
  if (k === "spread") {
    return v === true || v.split(",").every((s) => /^p[1234][abc]$/.test(s));
  }
  if (k === "from") {
    return verifyEffectName(v, gen) || verifyMoveName(v, gen) || verifyAbilityName(v, gen);
  }
  if (k === "number")
    return verifyNum(v);
  if (k === "move")
    return verifyMoveName(v, gen) || verifyID(v);
  if (k === "anim")
    return verifyAnimationName(v, gen) || v === "prepare";
  return false;
}
var Handler = class {
  constructor(gen, raw) {
    this.gen = gen;
    this.raw = !!raw;
  }
  "|init|"(args) {
    return args.length === 2 && ["chat", "battle", "html"].includes(args[1]);
  }
  "|title|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|users|"(args) {
    return args.length === 2 && !!args[1];
  }
  "||"(args) {
    return args.length === 2 && !args[0];
  }
  "|html|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|pagehtml|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|uhtml|"(args) {
    return args.length === 3 && !!args[1];
  }
  "|uhtmlchange|"(args) {
    return args.length === 3 && !!args[1];
  }
  "|join|"(args) {
    if (args.length !== 3)
      return false;
    if (typeof args[2] !== "boolean")
      return false;
    return !!args[1];
  }
  "|leave|"(args) {
    if (args.length !== 3)
      return false;
    if (typeof args[2] !== "boolean")
      return false;
    return !!args[1];
  }
  "|name|"(args) {
    if (args.length !== 4)
      return false;
    if (typeof args[3] !== "boolean")
      return false;
    return !!args[1] && verifyID(args[2]);
  }
  "|chat|"(args) {
    return args.length === 3 && !!args[1];
  }
  "|notify|"(args) {
    return args.length >= 2 && args.length <= 4 && args.every((a) => !!a);
  }
  "|:|"(args) {
    return args.length === 2 && verifyTimestamp(args[1]);
  }
  "|t:|"(args) {
    return args.length === 2 && verifyTimestamp(args[1]);
  }
  "|c:|"(args) {
    return args.length === 4 && verifyTimestamp(args[1]) && !!args[2];
  }
  "|battle|"(args) {
    return args.length === 4 && verifyRoomID(args[1]) && !!args[2] && !!args[3];
  }
  "|popup|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|pm|"(args) {
    return args.length === 4 && args.every((a) => !!a);
  }
  "|usercount|"(args) {
    return args.length === 2 && verifyNum(args[1]);
  }
  "|nametaken|"(args) {
    return args.length === 3 && !args[1] && !args[2];
  }
  "|challstr|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|customgroups|"(args) {
    return args.length === 2 && verifyJSON(args[1]);
  }
  "|updateuser|"(args) {
    if (args.length < 5)
      return false;
    return !!args[1] && (args[2] === "0" || args[2] === "1") && !!args[3] && verifyJSON(args[4]);
  }
  "|formats|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|updatesearch|"(args) {
    return args.length === 2 && verifyJSON(args[1]);
  }
  "|message|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|updatechallenges|"(args) {
    return args.length === 2 && verifyJSON(args[1]);
  }
  "|queryresponse|"(args) {
    return args.length === 3 && QUERYTYPES.includes(args[1]) && verifyJSON(args[2]);
  }
  "|unlink|"(args) {
    if (args.length === 2)
      return !!args[1];
    if (args.length === 3)
      return args[1] === "hide" && !!args[2];
    return false;
  }
  "|raw|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|warning|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|error|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|bigerror|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|chatmsg|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|chatmsg-raw|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|controlshtml|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|fieldhtml|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|debug|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|deinit|"(args) {
    return args.length === 1;
  }
  "|selectorhtml|"(args) {
    return args.length === 3 && !!args[1] && !!args[2];
  }
  "|refresh|"(args) {
    return args.length === 1;
  }
  "|tempnotify|"(args) {
    return args.length >= 3 && !!args[1] && !!args[2] && (args.length === 3 || args.length >= 4 && !!args[3] && (args.length === 4 || args.length === 5 && !!args[4]));
  }
  "|tempnotifyoff|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|noinit|"(args) {
    return args.length >= 3 && !!args[2] && ((args[1] === "joinfailed" || args[1] === "namerequired" || args[1] === "nonexistent") && args.length === 3 || args[1] === "rename" && args.length === 4 && verifyRoomID(args[2]) && !!args[3]);
  }
  "|hidelines|"(args) {
    return args.length >= 3 && verifyID(args[2]) && ((args[1] === "delete" || args[1] === "hide") && args.length === 4 && verifyNum(args[3]) || args[1] === "unlink" && args.length === 3);
  }
  "|expire|"(args) {
    return args.length === 1 || args.length === 2 && !!args[1];
  }
  "|askreg|"(args) {
    return args.length === 2 && verifyID(args[1]);
  }
  "|tournament|create|"(args) {
    return args.length === 4 && !!args[2] && verifyNum(args[3]);
  }
  "|tournament|update|"(args) {
    return args.length === 3 && verifyJSON(args[2]);
  }
  "|tournament|updateEnd|"(args) {
    return args.length === 2;
  }
  "|tournament|error|"(args) {
    return args.length === 3 && !!args[2];
  }
  "|tournament|forceend|"(args) {
    return args.length === 2;
  }
  "|tournament|join|"(args) {
    return args.length === 3 && !!args[2];
  }
  "|tournament|leave|"(args) {
    return args.length === 3 && !!args[2];
  }
  "|tournament|replace|"(args) {
    return args.length === 4 && !!args[2] && !!args[3];
  }
  "|tournament|start|"(args) {
    return args.length === 3 && verifyNum(args[2]);
  }
  "|tournament|disqualify|"(args) {
    return args.length === 3 && !!args[2];
  }
  "|tournament|battlestart|"(args) {
    return args.length === 5 && !!args[2] && !!args[3] && verifyRoomID(args[4]);
  }
  "|tournament|battleend|"(args) {
    if (args.length !== 7)
      return false;
    if (!args[2] || !args[3])
      return false;
    if (/^[0-6],[0-6]$/.test(args[5]))
      return false;
    if (args[6] === "success") {
      return ["win", "loss", "draw"].includes(args[4]);
    } else if (args[6] === "fail") {
      return args[4] === "draw";
    } else {
      return false;
    }
  }
  "|tournament|end|"(args) {
    return args.length === 3 && verifyJSON(args[2]);
  }
  "|tournament|scouting|"(args) {
    return args.length === 3 && (args[2] === "allow" || args[2] === "disallow");
  }
  "|tournament|autostart|"(args) {
    return args.length === 3 && args[2] === "off" || args.length === 4 && args[2] === "on" && verifyNum(args[3]);
  }
  "|tournament|autodq|"(args) {
    return args.length === 3 && args[2] === "off" || args.length === 4 && ["on", "target"].includes(args[2]) && verifyNum(args[3]);
  }
  "|player|"(args) {
    if (args.length === 2)
      return verifyPlayer(args[1]);
    return args.length === 5 && verifyPlayer(args[1]) && !!args[2] && (args[4] === "" || verifyNum(args[4]));
  }
  "|teamsize|"(args) {
    return args.length === 3 && verifyPlayer(args[1]) && verifyNum(args[2]);
  }
  "|gametype|"(args) {
    return args.length === 2 && GAMETYPES.includes(args[1]);
  }
  "|gen|"(args) {
    const gen = +args[1];
    return args.length === 2 && gen >= 1 && gen <= 9;
  }
  "|custom|"() {
    return true;
  }
  "|tier|"(args) {
    return args.length === 2 && verifyName(args[1]);
  }
  "|rated|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|seed|"(args) {
    return args.length === 2 && /^(\d|,)+$/.test(args[1]);
  }
  "|rule|"(args) {
    return args.length === 2 && args[1].includes(":");
  }
  "|teampreview|"(args) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 1 || args.length === 2 && verifyNum(args[1]);
  }
  "|updatepoke|"(args) {
    if (this.gen && this.gen.num < 8)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonDetails(args[2], this.gen);
  }
  "|clearpoke|"(args) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 1;
  }
  "|poke|"(args) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 4 && verifyPlayer(args[1]) && verifyPokemonDetails(args[2], this.gen) && POKE_ITEMS.includes(args[3]);
  }
  "|start|"(args) {
    return args.length === 1;
  }
  "|done|"(args) {
    return args.length === 1;
  }
  "|request|"(args) {
    return args.length === 2 && verifyJSON(args[1]);
  }
  "|sentchoice|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|inactive|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|inactiveoff|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|upkeep|"(args) {
    return args.length === 1;
  }
  "|turn|"(args) {
    return args.length === 2 && verifyNum(args[1]);
  }
  "|win|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|tie|"(args) {
    return args.length === 1;
  }
  // TODO
  "|move|"(args, kwArgs) {
    var _a;
    if (!verifyPokemonIdent(args[1]))
      return false;
    if (!(args[2] === "recharge" || verifyMoveName(args[2], this.gen)))
      return false;
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1:
      case 2: {
        return args.length === 4 && (args[3] === "" || args[3] !== "null" && verifyPokemonIdent(args[3])) && verifyKWArgs(kwArgs, ["miss", "still", "from"], this.gen) && (!kwArgs.from || verifyMoveName(kwArgs.from, this.gen));
      }
      case 3: {
        return args.length === 4 && (args[3] === "" || (args[3] === "null" ? ["Helping Hand"].includes(args[2]) : verifyPokemonIdent(args[3]))) && verifyKWArgs(kwArgs, ["miss", "still", "from", "notarget", "spread"], this.gen) && (!kwArgs.from || kwArgs.from === "lockedmove" || verifyMoveName(kwArgs.from, this.gen));
      }
      case 4: {
        const from = [
          "move: Metronome",
          "move: Mirror Move",
          "move: Sleep Talk",
          "Snatch",
          "move: Assist",
          "move: Copycat",
          "Magic Coat",
          "lockedmove",
          "move: Me First",
          "move: Nature Power",
          "Pursuit"
        ];
        return args.length === 4 && (args[3] === "" || (args[3] === "null" ? ["Helping Hand"].includes(args[2]) : verifyPokemonIdent(args[3]))) && verifyKWArgs(kwArgs, ["miss", "still", "from", "notarget", "spread"], this.gen) && (!kwArgs.from || from.includes(kwArgs.from));
      }
      default: {
        const keys = [...KWARGS, "anim", "miss", "notarget", "prepare", "spread", "zeffect"];
        if (!verifyKWArgs(kwArgs, keys, this.gen))
          return false;
        return args.length === 3 || args.length === 4 && (args[3] === "" || args[3] === "null" || verifyPokemonIdent(args[3]));
      }
    }
  }
  "|switch|"(args, kwArgs) {
    const valid = args.length === 4 && verifyPokemonIdent(args[1]) && verifyPokemonDetails(args[2], this.gen) && verifyPokemonHPStatus(args[3]);
    if (!valid)
      return false;
    if (!this.gen)
      return verifyKWArgs(kwArgs, KWARGS, this.gen);
    if (this.gen.num === 1)
      return !Object.keys(kwArgs).length;
    const from = [
      "Baton Pass",
      "U-turn",
      "Volt Switch",
      "Parting Shot",
      "Flip Turn",
      "Teleport",
      "Chilly Reception",
      "Shed Tail"
    ];
    const to = [0, 0, 1, 1, 2, 3, 4, 4, 6, 8];
    if (!verifyKWArgs(kwArgs, ["from"], this.gen))
      return false;
    return !kwArgs.from || from.slice(0, to[this.gen.num]).includes(kwArgs.from);
  }
  "|drag|"(args) {
    if (this.gen && this.gen.num < 2)
      return false;
    return args.length === 4 && verifyPokemonIdent(args[1]) && verifyPokemonDetails(args[2], this.gen) && verifyPokemonHPStatus(args[3]);
  }
  "|detailschange|"(args) {
    if (this.gen && this.gen.num < 4)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonDetails(args[2], this.gen);
  }
  "|replace|"(args) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonDetails(args[2], this.gen);
  }
  "|swap|"(args, kwArgs) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 3 && verifyKWArgs(kwArgs, ["from"], this.gen) && verifyPokemonIdent(args[1]) && verifyNum(args[2]) && kwArgs.from === "move: Ally Switch";
  }
  // TODO
  "|cant|"(args, kwArgs) {
    var _a;
    if (!verifyPokemonIdent(args[1]))
      return false;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      const reasons = ["Disable", "flinch", "slp", "frz", "par", "partiallytrapped", "recharge"];
      if (!reasons.includes(args[2]) || Object.keys(kwArgs).length)
        return false;
      return args[2] === "Disable" ? args.length === 4 && verifyMoveName(args[3], this.gen) : args.length === 3;
    }
    return (args.length === 3 || args.length === 4) && (REASONS.includes(args[2]) || verifyEffectName(args[2], this.gen) || verifyAbilityName(args[2], this.gen) || verifyMoveName(args[2], this.gen)) && (!args[3] || verifyEffectName(args[3], this.gen) || verifyMoveName(args[3], this.gen)) && verifyKWArgs(kwArgs, KWARGS, this.gen);
  }
  "|faint|"(args) {
    return args.length === 2 && verifyPokemonIdent(args[1]);
  }
  "|-formechange|"(args, kwArgs) {
    var _a;
    if (this.gen && this.gen.num < 3)
      return false;
    const valid = verifyPokemonIdent(args[1]) && verifySpeciesName(args[2], this.gen) && args.length === 3 || args.length === 4 && args[3] === "";
    if (!valid)
      return false;
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 3: {
        return verifyKWArgs(kwArgs, ["msg", "from"], this.gen) && !!kwArgs.msg && kwArgs.from === "ability: Forecast";
      }
      case 4: {
        return !Object.keys(kwArgs).length || verifyKWArgs(kwArgs, ["msg", "from"], this.gen) && !!kwArgs.msg && (kwArgs.from === "ability: Forecast" || kwArgs.from === "ability: Flower Gift");
      }
      default:
        return verifyKWArgs(kwArgs, [...KWARGS, "msg"], this.gen);
    }
  }
  // TODO
  "|-fail|"(args, kwArgs) {
    var _a;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      const valid = verifyPokemonIdent(args[1]) && verifyKWArgs(kwArgs, ["weak"], this.gen);
      if (!valid || args.length > 3)
        return false;
      if (args.length === 2)
        return true;
      const reasons = ["move: Substitute", "par", "psn", "slp", "tox"];
      if (!reasons.includes(args[2]))
        return false;
      return !kwArgs.weak || args[2] === "move: Substitute";
    }
    const keys = [...KWARGS, "forme", "heavy", "msg", "weak", "fail", "block"];
    if (!verifyKWArgs(kwArgs, keys, this.gen)) {
      return false;
    }
    if (args.length === 2)
      return verifyPokemonIdent(args[1]);
    if (args.length === 3) {
      return verifyPokemonIdent(args[1]) && (verifyStatusName(args[2]) || verifyEffectName(args[2], this.gen) || verifyMoveName(args[2], this.gen));
    }
    return args.length === 4 && verifyPokemonIdent(args[1]) && args[2] === "unboost" && (verifyBoostID(args[3]) || verifyStatDisplayName(args[3]));
  }
  // TODO FIXME
  "|-block|"(args, kwArgs) {
    var _a;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      return args.length === 4 && verifyPokemonIdent(args[1]) && !Object.keys(kwArgs).length && args[2] === "move: Mist" && args[3] === "";
    }
    if (!verifyKWArgs(kwArgs, KWARGS, this.gen))
      return false;
    if (!(verifyPokemonIdent(args[1]) && (verifyEffectName(args[2], this.gen) || verifyMoveName(args[2], this.gen)))) {
      return false;
    }
    if (args.length === 3)
      return true;
    if (args.length === 4)
      return args[3] === "" || verifyMoveName(args[3], this.gen);
    return args.length === 5 && verifyPokemonIdent(args[1]) && verifyEffectName(args[2], this.gen) && verifyMoveName(args[3], this.gen) && (args[4] === "" || verifyPokemonIdent(args[4]));
  }
  "|-notarget|"(args) {
    if (this.gen && this.gen.num < 3)
      return false;
    if (args.length === 2 && verifyPokemonIdent(args[1]))
      return true;
    return !this.gen && args.length === 1;
  }
  "|-miss|"(args) {
    var _a;
    if (!verifyPokemonIdent(args[1]))
      return false;
    if (args.length === 2)
      return !this.gen || this.gen.num <= 2;
    return ((_a = this.gen) == null ? void 0 : _a.num) !== 1 && args.length === 3 && verifyPokemonIdent(args[2]);
  }
  // TODO
  "|-damage|"(args, kwArgs) {
    var _a;
    const valid = args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonHPStatus(args[2]);
    if (!valid)
      return false;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      if (!verifyKWArgs(kwArgs, ["from", "of"], this.gen))
        return false;
      return !kwArgs.from || (kwArgs.of ? ["brn", "psn", "Leech Seed", "Recoil"] : ["brn", "psn", "confusion"]).includes(kwArgs.from);
    }
    return verifyKWArgs(kwArgs, [...KWARGS, "partiallytrapped"], this.gen);
  }
  // TODO
  "|-heal|"(args, kwArgs) {
    var _a;
    const valid = args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonHPStatus(args[2]);
    if (!valid)
      return false;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      if (!verifyKWArgs(kwArgs, ["from", "of", "silent"], this.gen))
        return false;
      if (!Object.keys(kwArgs).length)
        return true;
      return kwArgs.silent ? !(kwArgs.from || kwArgs.of) : kwArgs.from === "drain" && !!kwArgs.of;
    }
    return verifyKWArgs(kwArgs, [...KWARGS, "wisher", "zeffect"], this.gen);
  }
  "|-sethp|"(args, kwArgs) {
    var _a;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonHPStatus(args[2]) && verifyKWArgs(kwArgs, ["from", "silent"], this.gen) && kwArgs.from === "move: Pain Split";
  }
  // TODO
  "|-status|"(args, kwArgs) {
    var _a, _b, _c, _d;
    const valid = args.length === 3 && verifyPokemonIdent(args[1]) && verifyStatusName(args[2]);
    if (!valid)
      return false;
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1:
      case 2: {
        if (!verifyKWArgs(kwArgs, ["from", "silent"], this.gen))
          return false;
        if (kwArgs.from) {
          return !kwArgs.silent && args[2] === "slp" && kwArgs.from.startsWith("move: ");
        }
        return !kwArgs.silent || args[2] === "psn";
      }
      case 3: {
        if (["frz", "tox"].includes(args[2]))
          return !Object.keys(kwArgs).length;
        if (!verifyKWArgs(kwArgs, ["from", "of"], this.gen))
          return false;
        if (args[2] === "slp") {
          return !kwArgs.of && (!kwArgs.from || ((_b = kwArgs.from) == null ? void 0 : _b.startsWith("move: ")));
        }
        return !kwArgs.from || kwArgs.from.startsWith("ability: ") && !!kwArgs.of;
      }
      case 4: {
        if (args[2] === "frz")
          return !Object.keys(kwArgs).length;
        if (!verifyKWArgs(kwArgs, ["from", "of"], this.gen))
          return false;
        if (args[2] === "slp") {
          return !kwArgs.of && (!kwArgs.from || ((_c = kwArgs.from) == null ? void 0 : _c.startsWith("move: ")));
        }
        if ((_d = kwArgs.from) == null ? void 0 : _d.startsWith("item: ")) {
          return ["brn", "tox"].includes(args[2]) && !kwArgs.of;
        }
        return !kwArgs.from || kwArgs.from.startsWith("ability: ") && !!kwArgs.of;
      }
      default:
        return verifyKWArgs(kwArgs, KWARGS, this.gen);
    }
  }
  // TODO
  "|-curestatus|"(args, kwArgs) {
    var _a;
    const valid = args.length === 3 && verifyPokemonIdent(args[1]) && verifyStatusName(args[2]);
    if (!valid)
      return false;
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1: {
        if (!verifyKWArgs(kwArgs, ["msg", "silent"], this.gen))
          return false;
        if (kwArgs.msg)
          return ["slp", "frz"].includes(args[2]);
        return !!kwArgs.silent;
      }
      case 2:
        return verifyKWArgs(kwArgs, ["msg"], this.gen) && !!kwArgs.msg;
      case 3:
      case 4: {
        if (!verifyKWArgs(kwArgs, ["msg", "silent", "from"], this.gen))
          return false;
        if (Object.keys(kwArgs).length > 1)
          return false;
        if (!kwArgs.from)
          return true;
        if (args[2] === "frz") {
          if (kwArgs.silent)
            return false;
        } else {
          return kwArgs.from === "ability: Natural Cure";
        }
        const from = ["move: Flame Wheel", "move: Sacred Fire", "ability: Natural Cure"];
        if (this.gen.num === 4)
          from.push("move: Flare Blitz");
        return from.includes(kwArgs.from);
      }
      default:
        return verifyKWArgs(kwArgs, [...KWARGS, "thaw", "msg"], this.gen);
    }
  }
  "|-cureteam|"(args, kwArgs) {
    if (this.gen && (this.gen.num < 2 || this.gen.num > 4))
      return false;
    const valid = args.length === 2 && verifyPokemonIdent(args[1]) && verifyKWArgs(kwArgs, ["from"], this.gen);
    if (!valid)
      return false;
    if (!this.gen)
      return true;
    return kwArgs.from === (this.gen.num === 2 ? "move: Heal Bell" : "move: Aromatherapy");
  }
  // TODO gen 2/3/4
  "|-boost|"(args, kwArgs) {
    var _a;
    const valid = args.length === 4 && verifyPokemonIdent(args[1]) && verifyBoostID(args[2]) && verifyNum(args[3]);
    if (!valid)
      return false;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      if (kwArgs.from === "Rage" && args[2] === "atk")
        return true;
      return !Object.keys(kwArgs).length;
    }
    return verifyKWArgs(kwArgs, [...KWARGS, "multiple", "zeffect"], this.gen);
  }
  // TODO gen 2/3/4
  "|-unboost|"(args, kwArgs) {
    var _a;
    const valid = args.length === 4 && verifyPokemonIdent(args[1]) && verifyBoostID(args[2]) && verifyNum(args[3]);
    if (!valid)
      return false;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1)
      return !Object.keys(kwArgs).length;
    return verifyKWArgs(kwArgs, [...KWARGS, "multiple", "zeffect"], this.gen);
  }
  "|-setboost|"(args, kwArgs) {
    var _a;
    if (this.gen && this.gen.num < 2)
      return false;
    const from = ((_a = this.gen) == null ? void 0 : _a.num) === 2 ? ["move: Belly Drum"] : ["move: Belly Drum", "ability: Anger Point"];
    return args.length === 4 && verifyPokemonIdent(args[1]) && args[2] === "atk" && verifyNum(args[3]) && verifyKWArgs(kwArgs, ["from"], this.gen) && from.includes(kwArgs.from);
  }
  "|-swapboost|"(args, kwArgs) {
    if (!(verifyPokemonIdent(args[1]) && verifyPokemonIdent(args[2])))
      return false;
    if (!verifyKWArgs(kwArgs, ["from"], this.gen))
      return false;
    if (!this.gen)
      return args.length === 3 || args.length === 4 && verifyBoostIDs(args[3]);
    if (this.gen.num < 4)
      return false;
    switch (kwArgs.from) {
      case "move: Heart Swap":
        return args.length === 3;
      case "move: Power Swap":
        return args.length === 4 && args[3] === "atk, spa";
      case "move: Guard Swap":
        return args.length === 4 && args[3] === "def, spd";
      default:
        return false;
    }
  }
  "|-invertboost|"(args, kwArgs) {
    if (this.gen && this.gen.num < 6)
      return false;
    return args.length === 2 && verifyPokemonIdent(args[1]) && verifyKWArgs(kwArgs, ["from"], this.gen) && kwArgs.from === "move: Topsy-Turvy";
  }
  "|-clearboost|"(args, kwArgs) {
    if (!(args.length === 2 && verifyPokemonIdent(args[1])))
      return false;
    if (!this.gen)
      return verifyKWArgs(kwArgs, [...KWARGS], this.gen);
    if (this.gen.num < 5)
      return false;
    if (this.gen.num < 8)
      return !Object.keys(kwArgs).length;
    return verifyKWArgs(kwArgs, ["from", "of"], this.gen) && !kwArgs.from || kwArgs.from === "ability: Curious Medicine" && !!kwArgs.of;
  }
  "|-clearallboost|"(args, kwArgs) {
    if (args.length !== 1 || !verifyKWArgs(kwArgs, ["silent"], this.gen))
      return false;
    if (!this.gen)
      return true;
    return this.gen.num === 1 ? kwArgs.silent === true : !Object.keys(kwArgs).length;
  }
  "|-clearpositiveboost|"(args) {
    if (this.gen && this.gen.num < 7)
      return false;
    return args.length === 4 && verifyPokemonIdent(args[1]) && verifyPokemonIdent(args[2]) && args[3] === "move: Spectral Thief";
  }
  "|-ohko|"(args) {
    return args.length === 1;
  }
  "|-candynamax|"(args) {
    if (this.gen && this.gen.num < 8)
      return false;
    return args.length === 2 && verifyPlayer(args[1]);
  }
  "|-terastallize|"(args) {
    if (this.gen && this.gen.num < 9)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyType(args[2]);
  }
  "|-clearnegativeboost|"(args, kwArgs) {
    if (this.gen && this.gen.num < 3)
      return false;
    return args.length === 2 && verifyPokemonIdent(args[1]) && verifyKWArgs(kwArgs, ["silent", "zeffect"], this.gen) && Object.keys(kwArgs).length === 1;
  }
  "|-copyboost|"(args, kwArgs) {
    var _a;
    if (this.gen && this.gen.num < 2)
      return false;
    const from = ((_a = this.gen) == null ? void 0 : _a.num) === 2 ? ["move: Psych Up"] : ["move: Psych Up", "ability: Costar"];
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonIdent(args[2]) && verifyKWArgs(kwArgs, ["from"], this.gen) && from.includes(kwArgs.from);
  }
  "|-weather|"(args, kwArgs) {
    var _a;
    if (args.length !== 2)
      return false;
    if (args[1] === "none")
      return !Object.keys(kwArgs).length;
    const weather = [0, 0, 3, 4, 4, 4, 7, 7, 7, 8];
    const to = [0, 0, 0, 3, 4, 4, 7, 7, 8, 9];
    const abilities = [
      "ability: Drizzle",
      "ability: Sand Stream",
      "ability: Drought",
      "ability: Snow Warning",
      "ability: Primordial Sea",
      "ability: Desolate Land",
      "ability: Delta Stream",
      "ability: Sand Spit",
      "ability: Orichalcum Pulse"
    ];
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1:
        return false;
      case 2: {
        return WEATHER.slice(0, 3).includes(args[1]) && verifyKWArgs(kwArgs, ["upkeep"], this.gen);
      }
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9: {
        if (!WEATHER.slice(0, weather[this.gen.num]).includes(args[1]))
          return false;
        if (this.gen.num === 9 && args[1] === "Hail")
          return false;
        if (!verifyKWArgs(kwArgs, ["upkeep", "from", "of"], this.gen))
          return false;
        if (!Object.keys(kwArgs).length)
          return true;
        if (kwArgs.upkeep)
          return Object.keys(kwArgs).length === 1;
        return !!kwArgs.of && abilities.slice(0, to[this.gen.num]).includes(kwArgs.from);
      }
      default: {
        return verifyWeather(args[1]) && verifyKWArgs(kwArgs, [...KWARGS, "upkeep"], this.gen);
      }
    }
  }
  // TODO DEBUG
  "|-fieldstart|"(args, kwArgs) {
    if (this.gen && this.gen.num < 4)
      return false;
    return args.length === 2 && (verifyMoveEffectName(args[1], this.gen) || verifyFieldCondition(args[1])) && verifyKWArgs(kwArgs, KWARGS, this.gen);
  }
  // TODO DEBUG
  "|-fieldend|"(args, kwArgs) {
    if (this.gen && this.gen.num < 4)
      return false;
    return args.length === 2 && (verifyMoveEffectName(args[1], this.gen) || verifyFieldCondition(args[1])) && verifyKWArgs(kwArgs, KWARGS, this.gen);
  }
  "|-sidestart|"(args, kwArgs) {
    var _a;
    const valid = args.length === 3 && verifySide(args[1]) && (!this.gen || this.gen.num >= 8 ? verifyKWArgs(kwArgs, ["silent"], this.gen) : !Object.keys(kwArgs).length);
    if (!valid)
      return false;
    const modern = [
      "Reflect",
      "Safeguard",
      "move: Light Screen",
      "Spikes",
      "Mist",
      "move: Lucky Chant",
      "move: Stealth Rock",
      "move: Tailwind",
      "move: Toxic Spikes",
      "Grass Pledge",
      "Fire Pledge",
      "Water Pledge",
      "move: Sticky Web",
      "move: Aurora Veil"
    ];
    const classic = modern.slice(0, 9);
    classic[2] = "Light Screen";
    const dexit = modern.slice(0);
    dexit.splice(5, 1);
    const gen8 = [
      ...dexit,
      "G-Max Volcalith",
      "G-Max Wildfire",
      "G-Max Cannonade",
      "G-Max Steelsurge",
      "G-Max Vine Lash"
    ];
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1:
        return false;
      case 2:
        return modern.slice(0, 4).includes(args[2]);
      case 3:
        return classic.slice(0, 5).includes(args[2]);
      case 4:
        return classic.includes(args[2]);
      case 5:
        return modern.slice(0, 12).includes(args[2]);
      case 6:
        return modern.slice(0, 13).includes(args[2]);
      case 7:
        return modern.includes(args[2]);
      case 8:
        return gen8.includes(args[2]);
      case 9:
        return dexit.includes(args[2]);
      default: {
        return verifyMoveEffectName(args[2], this.gen) || verifySideCondition(args[2]);
      }
    }
  }
  // TODO
  "|-sideend|"(args, kwArgs) {
    if (this.gen && this.gen.num < 2)
      return false;
    return args.length === 3 && verifySide(args[1]) && (verifyMoveEffectName(args[2], this.gen) || verifySideCondition(args[2])) && verifyKWArgs(kwArgs, KWARGS, this.gen);
  }
  "|-swapsideconditions|"(args) {
    if (this.gen && this.gen.num < 8)
      return false;
    return args.length === 1;
  }
  // TODO
  "|-start|"(args, kwArgs) {
    var _a;
    if (!verifyPokemonIdent(args[1]) || args.length > 4)
      return false;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      if (args.length === 3) {
        const reasons = [
          "Bide",
          "Light Screen",
          "Mist",
          "Reflect",
          "Substitute",
          "confusion",
          "move: Focus Energy",
          "move: Leech Seed"
        ];
        return reasons.includes(args[2]) && (!Object.keys(kwArgs).length || !!kwArgs.silent && args[2] === "confusion");
      } else if (args.length === 4) {
        if (args[2] === "typechange") {
          return verifyTypes(args[3], this.gen) && verifyKWArgs(kwArgs, ["from", "of"], this.gen) && kwArgs.from === "move: Conversion";
        } else {
          return ["Disable", "Mimic"].includes(args[2]) && !Object.keys(kwArgs).length && verifyMoveName(args[3], this.gen);
        }
      }
    }
    const keys = [...KWARGS, "already", "damage", "block", "fatigue", "upkeep", "zeffect"];
    if (!verifyKWArgs(kwArgs, keys, this.gen))
      return false;
    if (args[2] === "Dynamax") {
      return args.length === 3 || args.length === 4 && (args[3] === "Gmax" || args[3] === "");
    }
    if (args[2] === "typechange") {
      return args.length === 3 || args.length === 4 && verifyTypes(args[3], this.gen);
    }
    if (args[2] === "typeadd") {
      return args.length === 4 && verifyType(args[3], this.gen);
    }
    if (!(verifyEffectName(args[2], this.gen) || verifyMoveName(args[2], this.gen))) {
      return false;
    }
    return args.length === 3 || verifyMoveName(args[3], this.gen);
  }
  // TODO
  "|-end|"(args, kwArgs) {
    var _a;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      const valid = args.length === 3 && verifyPokemonIdent(args[1]) && verifyKWArgs(kwArgs, ["silent"], this.gen);
      if (!valid)
        return false;
      return (kwArgs.silent ? [
        "Disable",
        "confusion",
        "Mist",
        "move: Focus Energy",
        "move: Leech Seed",
        "Toxic counter",
        "Light Screen",
        "Reflect",
        "move: Bide"
      ] : [
        "Disable",
        "confusion",
        "Bide",
        "Substitute"
      ]).includes(args[2]);
    }
    return args.length === 3 && verifyPokemonIdent(args[1]) && (verifyEffectName(args[2], this.gen) || verifyMoveName(args[2], this.gen) || verifyAbilityName(args[2], this.gen)) && verifyKWArgs(kwArgs, [...KWARGS, "partiallytrapped", "interrupt"], this.gen);
  }
  "|-crit|"(args) {
    return args.length === 2 && verifyPokemonIdent(args[1]);
  }
  "|-supereffective|"(args) {
    return args.length === 2 && verifyPokemonIdent(args[1]);
  }
  "|-resisted|"(args) {
    return args.length === 2 && verifyPokemonIdent(args[1]);
  }
  // TODO DEBUG
  "|-immune|"(args, kwArgs) {
    var _a;
    if (!verifyPokemonIdent(args[1]))
      return false;
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1:
        return args.length === 2 && verifyKWArgs(kwArgs, ["ohko"], this.gen);
      case 2:
        return args.length === 2 && verifyKWArgs(kwArgs, ["ohko"], this.gen);
      case 3:
      case 4: {
        if (args.length === 3) {
          return args[2] === "confusion" && Object.keys(kwArgs).length === 1 && kwArgs.from === "ability: Own Tempo";
        }
        if (!(args.length === 2 && verifyKWArgs(kwArgs, ["from", "ohko"], this.gen)))
          return false;
        if (Object.keys(kwArgs).length > 1)
          return false;
        return !kwArgs.from || (kwArgs.from.startsWith("ability: ") || this.gen.num === 4 && kwArgs.from === "Oblivious");
      }
      default: {
        if (!verifyKWArgs(kwArgs, [...KWARGS, "ohko"], this.gen))
          return false;
        return args.length === 2 || args.length === 3 && args[2] === "confusion";
      }
    }
  }
  // TODO
  "|-item|"(args, kwArgs) {
    if (this.gen && this.gen.num < 2)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyItemName(args[2], this.gen) && verifyKWArgs(kwArgs, [...KWARGS, "identify"], this.gen);
  }
  // TODO
  "|-enditem|"(args, kwArgs) {
    if (this.gen && this.gen.num < 2)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyItemName(args[2], this.gen) && verifyKWArgs(kwArgs, [...KWARGS, "eat", "move", "weaken"], this.gen);
  }
  // TODO
  "|-ability|"(args, kwArgs) {
    if (this.gen && this.gen.num < 3)
      return false;
    if (!verifyKWArgs(kwArgs, [...KWARGS, "move", "weaken", "fail"], this.gen))
      return false;
    if (!(verifyPokemonIdent(args[1]) && verifyAbilityName(args[2], this.gen)))
      return false;
    if (args.length === 3)
      return true;
    if (args.length === 4) {
      return args[3] === "boost" || verifySide(args[3]) || verifyPokemonIdent(args[3]);
    }
    return args.length === 5 && verifyAbilityName(args[3], this.gen) && verifyPokemonIdent(args[4]);
  }
  // TODO
  "|-endability|"(args, kwArgs) {
    if (this.gen && this.gen.num < 3)
      return false;
    if (!verifyKWArgs(kwArgs, KWARGS, this.gen))
      return false;
    if (!verifyPokemonIdent(args[1]))
      return false;
    return args.length === 2 || args.length === 3 && (args[2] === "none" || verifyAbilityName(args[2], this.gen));
  }
  "|-transform|"(args, kwArgs) {
    const valid = args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonIdent(args[2]);
    if (!valid)
      return false;
    if (this.gen && this.gen.num < 5)
      return !Object.keys(kwArgs).length;
    return verifyKWArgs(kwArgs, ["from"], this.gen) && (!kwArgs.from || kwArgs.from === "ability: Imposter");
  }
  "|-mega|"(args) {
    if (this.gen && (this.gen.num < 6 || this.gen.num > 7))
      return false;
    return args.length === 4 && verifyPokemonIdent(args[1]) && verifySpeciesName(args[2], this.gen) && (args[3] === "" || verifyItemName(args[3], this.gen));
  }
  "|-primal|"(args) {
    if (this.gen && this.gen.num < 6)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && ["Blue Orb", "Red Orb"].includes(args[2]);
  }
  "|-burst|"(args) {
    if (this.gen && this.gen.num < 7)
      return false;
    return args.length === 4 && verifyPokemonIdent(args[1]) && verifySpeciesName(args[2], this.gen) && verifyItemName(args[3], this.gen);
  }
  "|-zpower|"(args) {
    if (this.gen && this.gen.num < 7)
      return false;
    return args.length === 2 && verifyPokemonIdent(args[1]);
  }
  "|-zbroken|"(args) {
    if (this.gen && this.gen.num < 7)
      return false;
    return args.length === 2 && verifyPokemonIdent(args[1]);
  }
  // TODO
  "|-activate|"(args, kwArgs) {
    var _a;
    if (((_a = this.gen) == null ? void 0 : _a.num) === 1) {
      const valid = (args.length === 3 || args.length === 4 && args[3] === "") && verifyKWArgs(kwArgs, ["damage"], this.gen);
      if (!valid)
        return false;
      if (args[1] === "")
        return args[2] === "move: Splash";
      return verifyPokemonIdent(args[1]) && (kwArgs.damage ? args[2] === "Substitute" : ["Bide", "confusion", "move: Haze", "move: Mist", "move: Struggle"].includes(args[2]));
    }
    const keys = [
      ...KWARGS,
      "ability",
      "ability2",
      "block",
      "broken",
      "damage",
      "item",
      "move",
      "number",
      "consumed",
      "name",
      "fromitem",
      "source"
    ];
    if (!verifyKWArgs(kwArgs, keys, this.gen))
      return false;
    if (!(args[1] === "" || verifyPokemonIdent(args[1])))
      return false;
    if (!(verifyEffectName(args[2], this.gen) || verifyAbilityName(args[2], this.gen) || verifyMoveName(args[2], this.gen))) {
      return false;
    }
    if (args.length === 3)
      return true;
    if (args.length === 4) {
      return args[3] === "" || verifyAbilityName(args[3], this.gen) || verifyItemName(args[3], this.gen) || verifyMoveName(args[3], this.gen) || verifyNum(args[3]) || verifyPokemonIdent(args[3]);
    }
    return args.length === 5 && (args[3] === "" || verifyAbilityName(args[3], this.gen)) && (args[4] === "" || verifyAbilityName(args[4], this.gen));
  }
  "|-fieldactivate|"(args) {
    if (args.length !== 2)
      return false;
    if (!this.gen)
      return args[1] === "Delta Stream" || verifyEffectName(args[1], this.gen);
    const effects = [
      "move: Pay Day",
      "move: Perish Song",
      "move: Fairy Lock",
      "move: Ion Deluge",
      "Delta Stream",
      "move: Teatime"
    ];
    const to = [0, 1, 2, 2, 2, 2, 5, 5, 6, 6];
    return effects.slice(this.gen.num >= 5 ? 1 : 0, to[this.gen.num]).includes(args[1]);
  }
  "|-hint|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|-center|"(args) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 1;
  }
  "|-message|"(args) {
    return args.length === 2 && !!args[1];
  }
  "|-combine|"(args) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 1;
  }
  "|-waiting|"(args) {
    if (this.gen && this.gen.num < 5)
      return false;
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyPokemonIdent(args[2]);
  }
  "|-prepare|"(args) {
    if (!(verifyPokemonIdent(args[1]) && verifyMoveName(args[2], this.gen)))
      return false;
    if (this.gen && this.gen.num < 5)
      return args.length === 3;
    return args[2] === "Sky Drop" ? args.length === 4 && verifyPokemonIdent(args[3]) : args.length === 3;
  }
  "|-mustrecharge|"(args) {
    return args.length === 2 && verifyPokemonIdent(args[1]);
  }
  "|-hitcount|"(args) {
    return args.length === 3 && verifyPokemonIdent(args[1]) && verifyNum(args[2]);
  }
  "|-singlemove|"(args, kwArgs) {
    var _a;
    const valid = args.length === 3 && verifyPokemonIdent(args[1]);
    if (!valid)
      return false;
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1:
        return false;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7: {
        const reasons = ["Destiny Bond", "Rage"];
        if (this.gen.num >= 3)
          reasons.push("Grudge");
        return !Object.keys(kwArgs).length && reasons.includes(args[2]);
      }
      case 8: {
        const reasons = ["Destiny Bond", "Grudge"];
        return !Object.keys(kwArgs).length && reasons.includes(args[2]);
      }
      case 9: {
        return Object.keys(kwArgs).length ? args[2] === "Glaive Rush" && verifyKWArgs(kwArgs, ["silent"], this.gen) && kwArgs.silent === true : args[2] === "Destiny Bond" && !Object.keys(kwArgs).length;
      }
      default: {
        return verifyMoveName(args[2], this.gen) && verifyKWArgs(kwArgs, ["silent"], this.gen);
      }
    }
  }
  // TODO DEBUG
  "|-singleturn|"(args, kwArgs) {
    var _a;
    const valid = args.length === 3 && verifyPokemonIdent(args[1]);
    if (!valid)
      return false;
    switch (((_a = this.gen) == null ? void 0 : _a.num) || 0) {
      case 1:
        return false;
      case 2:
      case 3:
      case 4: {
        const reasons = ["Protect", "move: Endure"];
        if (this.gen.num >= 3) {
          reasons.push("Snatch", "move: Focus Punch", "move: Follow Me", "Helping Hand");
        }
        if (this.gen.num >= 4)
          reasons.push("move: Roost");
        if (!reasons.includes(args[2]))
          return false;
        if (this.gen.num === 2 && Object.keys(kwArgs).length)
          return false;
        if (!verifyKWArgs(kwArgs, ["of"], this.gen))
          return false;
        return !kwArgs.of || args[2] === "Helping Hand";
      }
      default: {
        return (verifyMoveEffectName(args[2], this.gen) || verifyMoveName(args[2], this.gen)) && verifyKWArgs(kwArgs, [...KWARGS, "zeffect"], this.gen);
      }
    }
  }
  "|-anim|"(args, kwArgs) {
    return args.length === 4 && verifyPokemonIdent(args[1]) && verifyAnimationName(args[2], this.gen) && verifyPokemonIdent(args[3]) && verifyKWArgs(kwArgs, [...KWARGS, "spread", "miss", "notarget"], this.gen);
  }
  "|-nothing|"(args) {
    if (!this.raw)
      throw new Error("Encountered non-upgraded |-nothing arg");
    return args.length === 1;
  }
};
var Verifier = class {
  constructor(gen, raw) {
    this.handler = new Handler(gen);
    if (raw)
      this.raw = new Handler(gen, raw);
  }
  verify(data) {
    for (const { roomid, args, kwArgs } of Protocol.parse(data)) {
      if (!verifyRoomID(roomid))
        return data;
      if (!this.dispatch(args, kwArgs, false))
        return data;
    }
    return void 0;
  }
  verifyLine(line) {
    const parsed = Protocol.parseBattleLine(line);
    if (!this.dispatch(parsed.args, parsed.kwArgs, false))
      return parsed;
    return void 0;
  }
  dispatch(args, kwArgs, raw = false) {
    const handler = raw && this.raw ? this.raw : this.handler;
    const key = Protocol.key(args, raw);
    if (!key || !handler[key])
      return false;
    if (Object.keys(kwArgs).length && !(key in Protocol.ARGS_WITH_KWARGS))
      return false;
    return handler[key](args, kwArgs);
  }
};
Verifier.EXISTS = (d) => d.exists;
export {
  Verifier
};
//# sourceMappingURL=index.mjs.map