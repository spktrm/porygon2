import { HPColor, StatusName, GenderName, TypeName, As, ID, SideID, MoveTarget, StatsTable, Player, GameType, GenerationNum, BoostID, Weather, FieldCondition, SideCondition } from '@pkmn/types';
export { ID } from '@pkmn/types';

type PositionLetter = Protocol.PositionLetter;
type PokemonIdent = Protocol.PokemonIdent;
type PokemonSearchID = Protocol.PokemonSearchID;
type PokemonDetails = Protocol.PokemonDetails;
type PokemonHPStatus = Protocol.PokemonHPStatus;
type Username = Protocol.Username;
type AvatarIdent = Protocol.AvatarIdent;
type EffectName = Protocol.EffectName;
type SpeciesName = Protocol.SpeciesName;
type AbilityName = Protocol.AbilityName;
type ItemName = Protocol.ItemName;
type MoveName = Protocol.MoveName;
type Message = Protocol.Message;
type Timestamp = Protocol.Timestamp;
type NotificationTitle = Protocol.NotificationTitle;
type HighlightToken = Protocol.HighlightToken;
type TempNotifyName = Protocol.TempNotifyName;
type HTML = Protocol.HTML;
type UHTMLName = Protocol.UHTMLName;
type SelectorName = Protocol.SelectorName;
type JSON = Protocol.JSON;
type RoomID = Protocol.RoomID;
type RoomTitle = Protocol.RoomTitle;
type UserList = Protocol.UserList;
type Num = Protocol.Num;
type FormatsList = Protocol.FormatsList;
type Score = Protocol.Score;
type Generator = Protocol.Generator;
type FormatName = Protocol.FormatName;
type Rule = Protocol.Rule;
type BoostIDs = Protocol.BoostIDs;
type Seed = Protocol.Seed;
type Slots = Protocol.Slots;
type Types = Protocol.Types;
type Nickname = Protocol.Nickname;
type StatDisplayName = Protocol.StatDisplayName;
type Reason = Protocol.Reason;
type QueryType = Protocol.QueryType;
type ChallengesJSON = Protocol.ChallengesJSON;
type SearchStateJSON = Protocol.SearchStateJSON;
type TournamentUpdateJSON = Protocol.TournamentUpdateJSON;
type TournamentEndedJSON = Protocol.TournamentEndedJSON;
type RequestJSON = Protocol.RequestJSON;
type Challenges = Protocol.Challenges;
type SearchState = Protocol.SearchState;
type TournamentUpdate = Protocol.TournamentUpdate;
type TournamentEnded = Protocol.TournamentEnded;
type Request = Protocol.Request;
declare namespace Request {
    type ActivePokemon = Protocol.Request.ActivePokemon;
    type Pokemon = Protocol.Request.Pokemon;
}
type RoomInitArgs = Protocol.RoomInitArgs;
type RoomInitArgName = Protocol.RoomInitArgName;
type RoomInitArgType = Protocol.RoomInitArgType;
type RoomMessageArgs = Protocol.RoomMessageArgs;
type RoomMessageArgName = Protocol.RoomMessageArgName;
type RoomMessageArgType = Protocol.RoomMessageArgType;
type RoomArgs = Protocol.RoomArgs;
type RoomArgName = Protocol.RoomArgName;
type RoomArgsType = Protocol.RoomArgsType;
type GlobalArgs = Protocol.GlobalArgs;
type GlobalArgName = Protocol.GlobalArgName;
type GlobalArgType = Protocol.GlobalArgType;
type MiscArgs = Protocol.MiscArgs;
type MiscArgName = Protocol.MiscArgName;
type MiscArgType = Protocol.MiscArgType;
type TournamentArgs = Protocol.TournamentArgs;
type TournamentArgName = Protocol.TournamentArgName;
type TournamentArgType = Protocol.TournamentArgType;
type BattleInitArgs = Protocol.BattleInitArgs;
type BattleInitArgName = Protocol.BattleInitArgName;
type BattleInitArgType = Protocol.BattleInitArgType;
type BattleProgressArgs = Protocol.BattleProgressArgs;
type BattleProgressArgName = Protocol.BattleProgressArgName;
type BattleProgressArgType = Protocol.BattleProgressArgType;
type BattleMajorArgs = Protocol.BattleMajorArgs;
type BattleMajorArgName = Protocol.BattleMajorArgName;
type BattleMajorArgType = Protocol.BattleMajorArgType;
type BattleMinorArgs = Protocol.BattleMinorArgs;
type BattleMinorArgName = Protocol.BattleMinorArgName;
type BattleMinorArgType = Protocol.BattleMinorArgType;
type BattleArgs = Protocol.BattleArgs;
type BattleArgName = Protocol.BattleArgName;
type BattleArgType = Protocol.BattleArgType;
type BattleArgsKWArgsTypes = Protocol.BattleArgsKWArgsTypes;
type BattleArgsWithKWArgs = Protocol.BattleArgsWithKWArgs;
type BattleArgsWithKWArgName = Protocol.BattleArgsWithKWArgName;
type BattleArgsWithKWArgType = Protocol.BattleArgsWithKWArgType;
type BattleArgKWArgs<T extends BattleArgName> = Protocol.BattleArgKWArgs<T>;
type BattleArgsKWArgs = Protocol.BattleArgsKWArgs;
type BattleArgsKWArgName = Protocol.BattleArgsKWArgName;
type BattleArgsKWArgType = Protocol.BattleArgsKWArgType;
type Args = Protocol.Args;
type ArgName = Protocol.ArgName;
type ArgType = Protocol.ArgType;
type KWArgs = Protocol.KWArgs;
type KWArgType = Protocol.KWArgType;
type ArgsWithKWArgName = Protocol.ArgsWithKWArgName;
type ArgsWithKWArgType = Protocol.ArgsWithKWArgType;
type Handler<T> = Protocol.Handler<T>;
interface PokemonHealth {
    hp: number;
    maxhp: number;
    hpcolor: HPColor | '';
    status?: StatusName;
    fainted?: boolean;
}
interface DetailedPokemon {
    details: PokemonDetails;
    name: string;
    speciesForme: string;
    level: number;
    shiny: boolean;
    gender?: GenderName;
    ident: PokemonIdent;
    terastallized?: TypeName;
    searchid: PokemonSearchID;
}
declare const ignoreKwArgsSimple: Set<string>;
declare namespace Protocol {
    type PositionLetter = 'a' | 'b' | 'c';
    /**
     * A Pokémon ID is in the form `POSITION: NAME`.
     *
     *   - `POSITION` is the spot that the Pokémon is in: it consists of the `PLAYER` of the player
     *     (see `|player|`), followed by a position letter (`a` in singles).
     *
     * An inactive Pokémon will not have a position letter.
     *
     * In doubles and triples battles, `a` will refer to the leftmost Pokémon from its trainer's
     * perspective (so the leftmost on your team, and the rightmost on your opponent's team, so
     * `p1a` faces `p2c`, etc).
     *
     * So the layout looks like:
     *
     * Doubles, player 1's perspective:
     *
     *    p2b p2a
     *    p1a p1b
     *
     * Doubles, player 2's perspective:
     *
     *    p1b p1a
     *    p2a p2b
     *
     * In multi and free-for-all battles, players are grouped by parity. That is, `p1` and `p3` share
     * a side, as do `p2` and `p4`. The position letters still follow the same conventions as in
     * double battles, so the layout looks like:
     *
     * Multi, player 1's perspective
     *
     *    p4b p2a
     *    p1a p3b
     *
     *   - `NAME` is the nickname of the Pokémon (or the species name, if no nickname is given).
     *
     * For example: `p1a: Sparky` could be a Charizard named Sparky. `p1: Dragonite` could be an
     * inactive Dragonite being healed by Heal Bell.
     *
     * For most commands, you can just use the position information in the Pokémon ID to identify
     * the Pokémon. Only a few commands actually change the Pokémon in that position (`|switch|`
     * switching, `|replace|` illusion dropping, `|drag|` phazing, and `|detailschange|` permanent
     * forme changes), and these all specify `DETAILS` for you to perform updates with.
     */
    type PokemonIdent = string & As<'PokemonIdent'>;
    /**
     * A comma-separated list of all information about a Pokemon visible on the battle screen:
     * species, level, gender, shininess. So it starts with `SPECIES`, adding `, L##` if it's not
     * level 100, `, M` if it's male, `, F` if it's female, `, shiny` if it's shiny.
     * In Gen 9, `, tera:TYPE` will be appended if the Pokemon has Terastallized.
     *
     * So, for instance, `Deoxys-Speed` is a level 100 non-shiny genderless Deoxys (Speed forme).
     * `Sawsbuck, L50, F, shiny` is a level 50 shiny female Sawsbuck (Spring form).
     *
     * In Team Preview, `DETAILS` will not include information not available in Team Preview (in
     * particular, level and shininess will be left off), and for Pokémon whose forme isn't revealed
     * in Team Preview, it will be given as `-*`. So, for instance, an Arceus in Team Preview would
     * have the details string `Arceus-*`, no matter what kind of Arceus it is.
     */
    type PokemonDetails = string & As<'PokemonDetails'>;
    /** `` `${ident}|${details}` ``. Tracked for ease of searching. */
    type PokemonSearchID = string & As<'PokemonSearchID'>;
    /**
     * The switched Pokémon has HP `HP`, and status `STATUS`. `HP` is specified as a fraction; if it
     * is your own Pokémon then it will be `CURRENT/MAX`, if not, it will be `/100` if HP Percentage
     * Mod is in effect and `/48` otherwise. `STATUS` can be left blank, or it can be `slp`, `par`
     * etc.
     *
     * If `HP` is 0, `STATUS` should be ignored. The current behavior is for `STATUS` to be `fnt`,
     * but this may change and should not be relied upon.
     */
    type PokemonHPStatus = string & As<'PokemonHPStatus'>;
    /**
     * A user, the first character being their rank (users with no rank are represented by a space),
     * and the rest of the string being their username.
     */
    type Username = string & As<'Username'>;
    /**
     * The player's avatar identifier (usually a number, but other values can be used for custom
     * avatars).
     */
    type AvatarIdent = string & As<'AvatarIdent'>;
    type Side = string & As<'Side'>;
    /**
     * The name of an 'effect' (move, ability, item, status, etc).
     *
     * Effects which are pokemon, moves, abilities or items are prefixed by `pokemon: `, ß`move: `,
     * `ability: ` and `item: ` respectively, whereas all other effects are unprefixed. For example,
     * `move: Spectral Thief` or `confusion`.
     */
    type EffectName = string & As<'EffectName'> | MoveEffectName;
    /** The name of a move 'effect', prefixed with `move: `. */
    type MoveEffectName = string & As<'MoveEffectName'>;
    /** The name of a Pokemon species (unprefixed). */
    type SpeciesName = string & As<'SpeciesName'>;
    /** The name of an ability (unprefixed). */
    type AbilityName = string & As<'AbilityName'>;
    /** The name of an item (unprefixed). */
    type ItemName = string & As<'ItemName'>;
    /** The name of a move (unprefixed). */
    type MoveName = string & As<'MoveName'>;
    /** The name of an animation (unprefixed). */
    type AnimationName = (string & As<'AnimationName'>) | MoveName;
    /** An arbitrary message to be displayed as is. */
    type Message = string & As<'Message'>;
    /** A choice string previously received by the server. */
    type Choice = string & As<'Choice'>;
    /** UNIX timestamp; (the number of seconds since 1970). */
    type Timestamp = string & As<'Timestamp'>;
    /** The title of a notification, usually displayed as bold. */
    type NotificationTitle = string & As<'NotificationTitle'>;
    /** Token used to determine whether a notification should highlight a user.  */
    type HighlightToken = string & As<'HighlightToken'>;
    /** Group name matched by `|tempnotify|` and `|tempnotifyoff|` messages. */
    type TempNotifyName = string & As<'TempNotifyName'>;
    /** HTML which should be sanitized before display. */
    type HTML = string & As<'HTML'>;
    /** A name to allow for matching two different `|uhtml|` messages. */
    type UHTMLName = string & As<'UHTMLName'>;
    /** CSS selector name used in `|selectorhtml|` messages. */
    type SelectorName = string & As<'SelectorName'>;
    /** A string which should be parsed as JSON. */
    type JSON = string & As<'JSON'>;
    /** The ID of a Room, may contains non-alphanumerics. */
    type RoomID = string & As<'RoomID'>;
    /**
     * The title of the room. The title is _not_ guaranteed to resemble  the room ID; for instance,
     * room `battle-gen7uu-779767714` could have title `Alice vs. Bob`.
     */
    type RoomTitle = string & As<'RoomTitle'>;
    /**
     * `USERLIST` is a comma-separated list of `USER`s, sent from chat rooms when they're joined.
     * Optionally, a `USER` can end in `@` followed by a user status message. A `STATUS` starting
     * in `!` indicates the user is away.
     */
    type UserList = string & As<'UserList'>;
    /** A number encoded as a string. */
    type Num = string & As<'Num'>;
    /**
     * A `|`-separated list of `FORMAT`s. `FORMAT` is a format name with one or more of these
     * suffixes: `,#` if the format uses random teams, `,,` if the format is only available for
     * searching, and `,` if the format is only available for challenging.
     *
     * Sections are separated by two vertical bars with the number of the column of that section
     * prefixed by `,` in it. After that follows the name of the section and another vertical bar.
     */
    type FormatsList = string & As<'FormatsList'>;
    /**
     * Either `Elimination` or `Round Robin` and describes the type of bracket that will be used.
     * `Elimination` includes a prefix that denotes the number of times a player can lose before
     * being eliminated (`Single`, `Double`, etc.). `Round Robin` includes the prefix `Double` if
     * every matchup will battle twice.
     */
    type Generator = string & As<'Generator'>;
    /**
     * An array of length 2 that denotes the number of Pokemon `USER1` had left and the number of
     * Pokemon `USER2` had left.
     */
    type Score = string & As<'Score'>;
    /** The name of a metagame format. */
    type FormatName = string & As<'FormatName'>;
    /** Rules affecting the battle, encoded as `RULE: DESCRIPTION`. */
    type Rule = string & As<'Rule'>;
    /** Takes the form of a comma-separated list of `BoostID` abbreviations. */
    type BoostIDs = string & As<'BoostIDs'>;
    type Seed = string & As<'Seed'>;
    type Slots = string & As<'Slots'>;
    type Types = string & As<'Types'>;
    type Nickname = string & As<'Nickname'>;
    type StatDisplayName = string & As<'StatDisplayName'>;
    type Reason = StatusName | 'partiallytrapped' | 'flinch' | 'nopp' | 'recharge';
    type QueryType = 'userdetails' | 'roomlist' | 'rooms' | 'laddertop' | 'roominfo' | 'savereplay' | 'debug';
    /** An unparsed JSON string containing `Challenges` information. */
    type ChallengesJSON = string & As<'ChallengesJSON'>;
    /** An unparsed JSON string containing `SearchState` information. */
    type SearchStateJSON = string & As<'SearchStateJSON'>;
    /** An unparsed JSON string containing `TournmanetUpdate` information. */
    type TournamentUpdateJSON = string & As<'TournamentUpdateJSON'>;
    /** An unparsed JSON string containing `TournamentEnded` information. */
    type TournamentEndedJSON = string & As<'TournamentEndedJSON'>;
    /** An unparsed JSON string containing `Request` information. */
    type RequestJSON = string & As<'RequestJSON'>;
    /** An unparsed JSON string containing `CustomGroups` information. */
    type CustomGroupsJSON = string & As<'CustomGroupsJSON'>;
    /**
     * A JSON object representing the current state of who the user is challenging and who is
     * challenging the user. You'll get this whenever challenges update (when you challenge someone,
     * when you receive a challenge, when you or someone you challenged accepts/rejects/cancels a
     * challenge).
     *
     *   - `challengesFrom` will be a `{userid: format}` table of received challenges.
     *   - `challengeTo` will be a challenge if you're challenging someone, or `null` if you haven't.
     *
     * If you are challenging someone, `challengeTo` will be in the format:
     *
     *   `{"to":"player1","format":"gen7randombattle"}`.
     *
     * To challenge someone, send:
     *
     *    /utm TEAM
     *    /challenge USERNAME, FORMAT
     *
     * To cancel a challenge you made to someone, send:
     *
     *    /cancelchallenge USERNAME
     *
     * To reject a challenge you received from someone, send:
     *
     *    /reject USERNAME
     *
     * To accept a challenge you received from someone, send:
     *
     *    /utm TEAM
     *    /accept USERNAME
     *
     * Teams are in packed format. `TEAM` can also be `null`, if the format doesn't require user-built
     * teams, such as Random Battle.
     *
     * Invalid teams will send a `|popup|` with validation errors, and the `/accept` or `/challenge`
     * command won't take effect.
     *
     * If the challenge is accepted, you will receive a room initialization message.
     */
    interface Challenges {
        challengesFrom: {
            [userid in ID]: ID;
        };
        challengeTo: null | {
            o: Username;
            format: ID;
        };
    }
    /**
     * A JSON object representing the current state of what battles the user is currently searching
     * for. You'll get this whenever searches update (when you search, cancel a search, or you start
     * or end a battle).
     *
     *   - `searching` will be an array of format IDs you're currently searching for games in.
     *   - `games` will be a `{roomid: title}` table of games you're currently in. Note that this
     *     includes ALL games, so `|updatesearch|` will be sent when you start/end challenge battles,
     *     and even non-Pokémon games like Mafia.
     *
     * To search for a battle against a random opponent, send:
     *
     *    /utm TEAM
     *    /search FORMAT
     *
     * Teams are in packed format. `TEAM` can also be `null`, if the format doesn't require
     * user-built teams, such as Random Battle.
     *
     * To cancel searching, send:
     *
     *    /cancelsearch
     */
    interface SearchState {
        searching: ID[];
        games: {
            [roomid in RoomID]: RoomTitle;
        };
    }
    /** A JSON object that reflects the custom user groups configured on the server. */
    type CustomGroups = CustomGroup[];
    interface CustomGroup {
        symbol: string;
        name: string | null;
        type: 'leadership' | 'staff' | 'normal' | 'punishment';
    }
    /**
     * A JSON object representing the changes in the tournament since the last update you
     * received or the start of the tournament. These include:
     *
     *   - `format`: the tournament's custom name or the format being used
     *   - `teambuilderFormat`: the format being used; sent if a custom name was set
     *   - `isStarted`: whether or not the tournament has started
     *   - `isJoined`: whether or not you have joined the tournament
     *   - `generator`: the type of bracket being used by the tournament
     *   - `playerCap`: the player cap that was set or 0 if it was removed
     *   - `bracketData`: an object representing the current state of the bracket
     *   - `challenges`: a list of opponents that you can currently challenge
     *   - `challengeBys`: a list of opponents that can currently challenge you
     *   - `challenged`: the name of the opponent that has challenged you
     *   - `challenging`: the name of the opponent that you are challenging
     */
    interface TournamentUpdate {
        format?: FormatName;
        teambuilderFormat?: FormatName;
        isStarted?: boolean;
        isJoined?: boolean;
        generator?: Generator;
        playerCap?: number;
        bracketData?: {
            [key: string]: any;
        };
        challenges?: Username[];
        challengeBys?: Username[];
        challenged?: Username[];
        challenging?: Username[];
    }
    /**
     * A JSON object send when a tournament ends containing:
     *
     *   - `results`: the name(s) of the winner(s) of the tournament
     *   - `format`: the tournament's custom name or the format that was used
     *   - `generator`: the type of bracket that was used by the tournament
     *   - `bracketData`: an object representing the final state of the bracket
     */
    interface TournamentEnded {
        results: Username[];
        format: FormatName;
        generator: Generator;
        bracketData: {
            [key: string]: any;
        };
    }
    type Request = MoveRequest | SwitchRequest | TeamRequest | WaitRequest;
    interface MoveRequest {
        requestType: 'move';
        rqid: number;
        side: Request.SideInfo;
        active: (Request.ActivePokemon | null)[];
        noCancel?: boolean;
    }
    interface SwitchRequest {
        requestType: 'switch';
        rqid: number;
        side: Request.SideInfo;
        forceSwitch: [true] & boolean[];
        noCancel?: boolean;
    }
    interface TeamRequest {
        requestType: 'team';
        rqid: number;
        side: Request.SideInfo;
        maxTeamSize?: number;
        noCancel?: boolean;
    }
    interface WaitRequest {
        requestType: 'wait';
        rqid: number;
        side: undefined;
        noCancel?: boolean;
    }
    namespace Request {
        interface SideInfo {
            name: Username;
            id: SideID;
            pokemon: Pokemon[];
        }
        interface ActivePokemon {
            moves: Array<{
                name: MoveName;
                id: ID;
                pp: number;
                maxpp: number;
                target: MoveTarget;
                disabled?: boolean;
            }>;
            maxMoves?: Array<{
                id: ID;
                target: MoveTarget;
                disabled?: boolean;
            }>;
            zMoves?: Array<{
                name: MoveName;
                id: ID;
                target: MoveTarget;
            } | null>;
            canDynamax?: boolean;
            canGigantamax?: boolean;
            canMegaEvo?: boolean;
            canUltraBurst?: boolean;
            canTerastallize?: string;
            trapped?: boolean;
            maybeTrapped?: boolean;
            maybeDisabled?: boolean;
        }
        interface Pokemon extends DetailedPokemon, PokemonHealth {
            active?: boolean;
            details: PokemonDetails;
            ident: PokemonIdent;
            pokeball: ID;
            ability: ID;
            baseAbility: ID;
            condition: PokemonHPStatus;
            item: ID;
            moves: ID[];
            stats: Omit<StatsTable, 'hp'>;
            commanding?: boolean;
            reviving?: boolean;
            teraType?: TypeName;
        }
    }
    interface RoomInitArgs {
        /**
         * `|init|ROOMTYPE`
         *
         * The first message received from a room when you join it. `ROOMTYPE` is one of:
         * `chat`, `battle`, or `html`.
         */
        '|init|': readonly ['init', 'chat' | 'battle' | 'html'];
        /**
         * `|title|TITLE`
         *
         * `TITLE` is the title of the room. The title is _not_ guaranteed to resemble
         * the room ID; for instance, room `battle-gen7uu-779767714` could have title `Alice vs. Bob`.
         */
        '|title|': readonly ['title', RoomTitle];
        /**
         * `|users|USERLIST`
         *
         * `USERLIST` is a comma-separated list of `USER`s, sent from chat rooms when they're joined.
         * Optionally, a `USER` can end in `@` followed by a user status message. A `STATUS` starting
         * in `!` indicates the user is away.
         */
        '|users|': readonly ['users', UserList];
    }
    type RoomInitArgName = keyof RoomInitArgs;
    type RoomInitArgType = RoomInitArgs[RoomInitArgName];
    interface RoomMessageArgs {
        /**
         * `||MESSAGE` or `MESSAGE`
         *
         * We received a message `MESSAGE`, which should be displayed directly in the room's log.
         */
        '||': readonly ['', Message];
        /**
         * `|html|HTML`
         *
         * We received an HTML message, which should be sanitized and displayed directly in the
         * room's log.
         */
        '|html|': readonly ['html', HTML];
        /**
         * `|uhtml|NAME|HTML`
         *
         * We recieved an HTML message (NAME) that can change what it's displaying, this is used in
         * things like our Polls system, for example.
         */
        '|uhtml|': readonly ['uhtml', UHTMLName, HTML];
        /**
         * `|uhtmlchange|NAME|HTML`
         *
         * Changes the HTML display of the `|uhtml|` message named (NAME).
         */
        '|uhtmlchange|': readonly ['uhtmlchange', UHTMLName, HTML];
        /**
         * `|join|USER`, `|j|USER`, or `|J|USER`
         *
         * `USER` joined the room. Optionally, `USER` may be appended with `@!` to indicate that the
         * user is away or busy. The final boolean is true if the join was intended to be silent (`J`).
         */
        '|join|': readonly ['join', Username, boolean];
        /**
         * `|leave|USER`, `|l|USER`, or `|L|USER`
         *
         * `USER` left the room. The final boolean is true if the leave was intended to be silent (`L`).
         */
        '|leave|': readonly ['leave', Username, boolean];
        /**
         * `|name|USER|OLDID`, `|n|USER|OLDID`, or `|N|USER|OLDID`
         *
         * A user changed name to `USER`, and their previous userid was `OLDID`. Optionally, `USER` may
         * be appended with `@!` to indicate that the user is away or busy. The final boolean is true if
         * the name change was intended to be silent (`N`).
         */
        '|name|': readonly ['name', Username, ID, boolean];
        /**
         * `|chat|USER|MESSAGE` or `|c|USER|MESSAGE`
         *
         * `USER` said `MESSAGE`. Note that `MESSAGE` can contain `|` characters.
         *
         * If `MESSAGE` starts with `/`, it is a special message. For instance, `/me TEXT` or
         * `/announce TEXT` or `/uhtml HTML`. A lot of these message types are abused to embed protocol
         * messages in PMs (for instance, `/uhtml` is a stopgap before the client is rewritten to
         * support `|uhtml|` etc in  PMs).
         *
         * If the server wants clients to actually render a message starting with `/`, it will send
         * message starting with `//` (exactly like how users need to send those messages).
         */
        '|chat|': readonly ['chat', Username, Message];
        /**
         * `|notify|TITLE|MESSAGE`
         *
         * Send a notification with `TITLE` and `MESSAGE` (usually, `TITLE` will be bold, and `MESSAGE`
         * is optional).
         *
         * `|notify|TITLE|MESSAGE|HIGHLIGHTTOKEN`
         *
         * Send a notification as above, but only if the user would be notified by a chat message
         * containing `HIGHLIGHTTOKEN` (i.e. if `HIGHLIGHTTOKEN` contains words added to `/highlight`,
         * or their username by default).
         */
        '|notify|': readonly ['notify', NotificationTitle, Message?] | readonly ['notify', NotificationTitle, Message, HighlightToken];
        /**
         * `|:|TIMESTAMP`
         *
         * `:` is the current time according to the server, so that times can be adjusted and reported
         * in the local time in the case of a discrepancy.
         *
         * The exact fate of this command is uncertain - it may or may not be replaced with a more
         * generalized way to transmit timestamps at some point.
         */
        '|:|': readonly [':', Timestamp];
        /**
         * `|c:|TIMESTAMP|USER|MESSAGE`
         *
         * `c:` is pretty much the same as `c`, but also comes with a UNIX timestamp; (the number of
         * seconds since 1970). This is used for accurate timestamps in chat logs.
         */
        '|c:|': ['c:', Timestamp, Username, Message];
        /**
         * `|battle|ROOMID|USER1|USER2` or `|b|ROOMID|USER1|USER2`
         *
         * A battle started between `USER1` and `USER2`, and the battle room has ID `ROOMID`.
         */
        '|battle|': readonly ['battle', RoomID, Username, Username];
    }
    type RoomMessageArgName = keyof RoomMessageArgs;
    type RoomMessageArgType = RoomMessageArgs[RoomMessageArgName];
    type RoomArgs = RoomInitArgs & RoomMessageArgs;
    type RoomArgName = RoomInitArgName | RoomMessageArgName;
    type RoomArgsType = RoomArgs[RoomArgName];
    interface GlobalArgs {
        /**
         * `|popup|MESSAGE`
         *
         * Show the user a popup containing `MESSAGE`. `||` denotes a newline in the popup.
         */
        '|popup|': readonly ['popup', Message];
        /**
         * `|pm|SENDER|RECEIVER|MESSAGE`
         *
         * A PM was sent from `SENDER` to `RECEIVER` containing the message `MESSAGE`.
         */
        '|pm|': readonly ['pm', Username, Username, Message];
        /**
         * `|usercount|USERCOUNT`
         *
         * `USERCOUNT` is the number of users on the server.
         */
        '|usercount|': readonly ['usercount', Num];
        /**
         * `|nametaken|USERNAME|MESSAGE`
         *
         * You tried to change your username to `USERNAME` but it failed for the reason described in
         * `MESSAGE`.
         */
        '|nametaken|': readonly ['nametaken', Username, Message];
        /**
         * `|challstr|CHALLSTR`
         *
         * You just connected to the server, and we're giving you some information you'll need to log
         * in.
         *
         * If you're already logged in and have session cookies, you can make an HTTP GET request to
         * `http://play.pokemonshowdown.com/action.php?act=upkeep&challstr=CHALLSTR`
         *
         * Otherwise, you'll need to make an HTTP POST request to
         * `http://play.pokemonshowdown.com/action.php` with the data
         * `act=login&name=USERNAME&pass=PASSWORD&challstr=CHALLSTR`
         *
         * `USERNAME` is your username and `PASSWORD` is your password, and `CHALLSTR` is the value you
         * got from `|challstr|`. Note that `CHALLSTR` contains `|` characters. (Also feel free to make
         * the request to `https://` if your client supports it.)
         *
         * Either way, the response will start with `]` and be followed by a JSON object which we'll
         * call `data`.
         *
         * Finish logging in (or renaming) by sending: `/trn USERNAME,0,ASSERTION` where `USERNAME` is
         * your desired username and `ASSERTION` is `data.assertion`.
         */
        '|challstr|': readonly ['challstr', string];
        /**
         * `|customgroups|JSON
         *
         * `JSON` is a JSON object that reflects the custom user groups configured on the server.
         */
        '|customgroups|': readonly ['customgroups', CustomGroupsJSON];
        /**
         * `|updateuser|USER|NAMED|AVATAR|SETTINGS`
         *
         * Your name, avatar or settings were successfully changed. Your rank and username are now
         * `USER`. Optionally, `USER` may be appended with `@!` to indicate that you are away or busy.
         * `NAMED` will be `0` if you are a guest or `1` otherwise. Your avatar is now `AVATAR`.
         * `SETTINGS` is a JSON object representing the current state of various user settings.
         */
        '|updateuser|': readonly ['updateuser', Username, '0' | '1', AvatarIdent, JSON];
        /**
         * `|formats|FORMATSLIST`
         *
         * This server supports the formats specified in `FORMATSLIST`. `FORMATSLIST` is a `|`-separated
         * list of `FORMAT`s. `FORMAT` is a format name with one or more of these suffixes: `,#` if the
         * format uses random teams, `,,` if the format is only available for searching, and `,` if the
         * format is only available for challenging.
         *
         * Sections are separated by two vertical bars with the number of the column of that section
         * prefixed by `,` in it. After that follows the name of the section and another vertical bar.
         */
        '|formats|': readonly ['formats', FormatsList];
        /**
         * `|updatesearch|JSON`
         *
         * `JSON` is a JSON object representing the current state of what battles the user is currently
         * searching for. You'll get this whenever searches update (when you search, cancel a search,
         * or you start or end a battle).
         */
        '|updatesearch|': readonly ['updatesearch', SearchStateJSON];
        /**
         * `|updatechallenges|JSON`
         *
         * `JSON` is a JSON object representing the current state of who the user is challenging and
         * who is challenging the user. You'll get this whenever challenges update (when you challenge
         * someone, when you receive a challenge, when you or someone you challenged
         * accepts/rejects/cancels a challenge).
         */
        '|updatechallenges|': readonly ['updatechallenges', ChallengesJSON];
        /**
         * `|queryresponse|QUERYTYPE|JSON`
         *
         * `JSON` is a JSON object representing containing the data that was requested with
         * `/query QUERYTYPE` or `/query QUERYTYPE DETAILS`.
         *
         * Possible queries include `/query roomlist` and `/query userdetails USERNAME`.
         */
        '|queryresponse|': readonly ['queryresponse', QueryType, JSON];
    }
    type GlobalArgName = keyof GlobalArgs;
    type GlobalArgType = GlobalArgs[GlobalArgName];
    interface MiscArgs {
        '|unlink|': readonly ['unlink', Username] | readonly ['unlink', 'hide', Username];
        '|raw|': readonly ['raw', HTML];
        '|warning|': readonly ['warning', Message];
        '|error|': readonly ['error', Message];
        '|bigerror|': readonly ['bigerror', Message];
        '|chatmsg|': readonly ['chatmsg', Message];
        '|chatmsg-raw|': readonly ['chatmsg-raw', HTML];
        '|controlshtml|': readonly ['controlshtml', HTML];
        '|fieldhtml|': readonly ['fieldhtml', HTML];
        '|debug|': readonly ['debug', Message];
        '|deinit|': readonly ['deinit'];
        '|pagehtml|': readonly ['pagehtml', HTML];
        '|selectorhtml|': readonly ['selectorhtml', SelectorName, HTML];
        '|refresh|': readonly ['refresh'];
        '|tempnotify|': readonly ['tempnotify', TempNotifyName, Message] | readonly ['tempnotify', TempNotifyName, Message, Message] | readonly ['tempnotify', TempNotifyName, Message, Message, string];
        '|tempnotifyoff|': readonly ['tempnotifyoff', TempNotifyName];
        '|noinit|': readonly ['noinit', 'joinfailed' | 'namerequired' | 'nonexistent', Message] | readonly ['noinit', 'rename', RoomID, RoomTitle];
        '|hidelines|': readonly ['hidelines', 'delete' | 'hide', ID, Num] | readonly ['hidelines', 'unlink', ID];
        '|expire|': readonly ['expire'] | readonly ['expire', Message];
        '|askreg|': readonly ['askreg', ID];
    }
    interface TournamentArgs {
        /**
         * `|tournament|create|FORMAT|GENERATOR|PLAYERCAP`
         *
         * `FORMAT` is the name of the format in which each battle will be played. `GENERATOR` is either
         * `Elimination` or `Round Robin` and describes the type of bracket that will be used.
         * `Elimination` includes a prefix that denotes the number of times a player can lose before
         * being eliminated (`Single`, `Double`, etc.). `Round Robin` includes the prefix `Double` if
         * every matchup will battle twice. `PLAYERCAP` is a number representing the maximum amount of
         * players that can join the tournament or `0` if no cap was specified.
         */
        '|tournament|create|': readonly ['tournament', 'create', Generator, '0' | Num];
        /**
         * `|tournament|update|JSON`
         *
         * `JSON` is a JSON object representing the changes in the tournament since the last update you
         * received or the start of the tournament.
         */
        '|tournament|update|': readonly ['tournament', 'update', TournamentUpdateJSON];
        /**
         * `|tournament|updateEnd`
         *
         * Signals the end of an update period.
         */
        '|tournament|updateEnd|': readonly ['tournament', 'updateEnd'];
        /**
         * `|tournament|error|ERROR`
         *
         * An error of type `ERROR` occurred.
         */
        '|tournament|error|': readonly ['tournament', 'error', Message];
        /**
         * `|tournament|forceend`
         *
         * The tournament was forcibly ended.
         */
        '|tournament|forceend|': readonly ['tournament', 'forceend'];
        /**
         * `|tournament|join|USER`
         *
         * `USER` joined the tournament.
         */
        '|tournament|join|': readonly ['tournament', 'join', Username];
        /**
         * `|tournament|leave|USER`
         *
         * `USER` left the tournament.
         */
        '|tournament|leave|': readonly ['tournament', 'leave', Username];
        /**
         * `|tournament|replace|OLD|NEW`
         *
         * The player `OLD` has been replaced with `NEW`
         */
        '|tournament|replace|': readonly ['tournament', 'replace', Username, Username];
        /**
         * `|tournament|start|NUMPLAYERS`
         *
         * The tournament started with `NUMPLAYERS` participants.
         */
        '|tournament|start|': readonly ['tournament', 'start', Num];
        /**
         * `|tournament|disqualify|USER`
         *
         * `USER` was disqualified from the tournament.
        */
        '|tournament|disqualify|': readonly ['tournament', 'disqualify', Username];
        /**
         * `|tournament|battlestart|USER1|USER2|ROOMID`
         *
         * A tournament battle started between `USER1` and `USER2`, and the battle room has ID `ROOMID`.
         */
        '|tournament|battlestart|': readonly ['tournament', 'battlestart', Username, Username, RoomID];
        /**
         * `|tournament|battleend|USER1|USER2|RESULT|SCORE|RECORDED|ROOMID`
         *
         * The tournament battle between `USER1` and `USER2` in the battle room `ROOMID` ended. `RESULT`
         * describes the outcome of the battle from `USER1`'s perspective (`win`, `loss`, or `draw`).
         * `SCORE` is an array of length 2 that denotes the number of Pokemon `USER1` had left and the
         * number of Pokemon `USER2` had left. `RECORDED` will be `fail` if the battle ended in a draw
         * and the bracket type does not support draws. Otherwise, it will be `success`.
         */
        '|tournament|battleend|': readonly [
            'tournament',
            'battleend',
            Username,
            Username,
            'win' | 'loss' | 'draw',
            Score,
            'success'
        ] | readonly ['tournament', 'battleend', Username, Username, 'draw', Score, 'fail'];
        /**
         * `|tournament|end|JSON`
         *
         * The tournament ended with details in `JSON`.
         */
        '|tournament|end|': readonly ['tournament', 'end', TournamentEndedJSON];
        /**
         * `|tournament|scouting|SETTING`
         *
         * Players are now either allowed or not allowed to join other tournament battles based on
         * `SETTING` (`allow` or `disallow`).
         */
        '|tournament|scouting|': readonly ['tournament', 'scouting', 'allow' | 'disallow'];
        /**
         * `|tournament|autostart|on|TIMEOUT`
         * `|tournament|autostart|off`
         *
         * If the third parameter is 'on': a timer was set for the tournament to auto-start in
         * `TIMEOUT` seconds. If the third parameter is 'off': the timer for the tournament to
         * auto-start was turned off.
         */
        '|tournament|autostart|': readonly ['tournament', 'autostart', 'on', Num] | readonly ['tournament', 'autostart', 'off'];
        /**
         * `|tournament|autodq|on|TIMEOUT`
         * `|tournament|autodq|off`
         * `|tournament|autodq|target|TIME`
         *
         * If the third parameter is 'on': a timer was set for the tournament to auto-disqualify
         * inactive players every `TIMEOUT` seconds. If the third parameter is 'off': the timer for the
         * tournament to auto-disqualify inactive players was turned off. If the third parameter is
         * 'target': you have `TIME` seconds to make or accept a challenge, or else you will be
         * disqualified for inactivity.
         */
        '|tournament|autodq|': readonly ['tournament', 'autodq', 'on' | 'target', Num] | readonly ['tournament', 'autodq', 'off'];
    }
    type TournamentArgName = keyof TournamentArgs;
    type TournamentArgType = TournamentArgs[TournamentArgName];
    type MiscArgName = keyof MiscArgs;
    type MiscArgType = MiscArgs[MiscArgName];
    interface BattleInitArgs {
        /**
         * `|player|PLAYER|USERNAME|AVATAR|RATING`
         *
         *   - `PLAYER` is `p1` or `p2` (may also be `p3` or `p4` in 4 player battles)
         *   - `USERNAME` is the username
         *   - `AVATAR` is the player's avatar identifier
         *   - `RATING` is the player's Elo rating in the format they're playing. This will only be
         *     displayed in rated battles and when the player is first introduced otherwise it's blank.
         */
        '|player|': readonly ['player', Player] | readonly ['player', Player, Username, AvatarIdent | '', Num | ''];
        /**
         * `|teamsize|PLAYER|NUMBER`
         *
         *   - `PLAYER` is `p1`, `p2`, `p3`, or `p4`
         *   - `NUMBER` is the number of Pokémon your opponent starts with. In games without Team
         *     Preview, you don't know which Pokémon your opponent has, but you at least know how many
         *     there are.
         */
        '|teamsize|': readonly ['teamsize', Player, Num];
        /**
         * `|gametype|GAMETYPE`
         *
         * - `GAMETYPE` is `singles`, `doubles`, `triples`, `multi`, `free-for-all` or `rotation`.
         */
        '|gametype|': readonly ['gametype', GameType];
        /**
         * `|gen|GENNUM`
         *
         * Generation number, from 1 to 8. Stadium counts as its respective gens;,Let's Go counts as 7,
         * and modded formats count as whatever gen they were based on.
         */
        '|gen|': readonly ['gen', GenerationNum];
        /**
         * `|tier|FORMATNAME`
         *
         * The name of the format being played.
         */
        '|tier|': readonly ['tier', FormatName];
        /**
         * `|rated`
         * `|rated|MESSAGE`
         *
         * Will be sent if the game will affect the player's ladder rating (Elo score). `MESSAGE` will
         * be included if the game is official in some other way, such as being a tournament game. Does
         * not actually mean the game is rated.
         */
        '|rated|': readonly ['rated'] | readonly ['rated', Message];
        '|seed|': readonly ['seed', Seed];
        /**
         * `|rule|RULE: DESCRIPTION`
         *
         * Will appear multiple times, one for each rule in effect.
         */
        '|rule|': readonly ['rule', Rule];
        /**
         * `|clearpoke`
         *
         * Marks the start of Team Preview
         */
        '|clearpoke|': readonly ['clearpoke'];
        /**
         * `|poke|PLAYER|DETAILS|ITEM`
         *
         * Declares a Pokémon for Team Preview.
         *
         *   - `PLAYER` is the player ID (see `|player|`)
         *   - `DETAILS` describes the pokemon
         *   - `ITEM` will be `item` if the Pokémon is holding an item, `mail` if the Pokémon is holding
         *     mail in Gen 5 or blank otherwise
         * Note that forme and shininess are hidden on this, unlike on the `|switch|`details message.
         */
        '|poke|': readonly ['poke', Player, PokemonDetails, 'item' | 'mail' | ''];
        /**
         * `|teampreview`
         *
         * Marks the end of Team Preview
         */
        '|teampreview|': readonly ['teampreview'] | ['teampreview', Num];
        /**
         * `|updatepoke|POKEMON|DETAILS`
         *
         * The specified Pokémon POKEMON's details are to revealed to be `DETAILS`.
         */
        '|updatepoke|': readonly ['updatepoke', PokemonIdent, PokemonDetails];
        /**
         * `|start`
         *
         * Indicates that the game has started.
         */
        '|start|': readonly ['start'];
    }
    type BattleInitArgName = keyof BattleInitArgs;
    type BattleInitArgType = BattleInitArgs[BattleInitArgName];
    interface BattleProgressArgs {
        /**
         * `|`
         *
         * Clears the message-bar, and add a spacer to the battle history. This is usually done
         * automatically by detecting the message-type, but can also be forced to happen with this.
         */
        '|done|': readonly ['done'];
        /**
         * `|request|REQUEST`
         *
         * Gives a JSON object containing a request for a choice (to move or switch). To assist in your
         * decision, `REQUEST.active` has information about your active Pokémon, and `REQUEST.side` has
         * information about your, your team as a whole. `REQUEST.rqid` is an optional request ID.
         */
        '|request|': readonly ['request', RequestJSON];
        /**
         * `|sentchoice|CHOICE`
         *
         * Conveys that `CHOICE` has already been received for the player and cannot be undone.
         */
        '|sentchoice|': readonly ['sentchoice', Choice];
        /**
         * `|inactive|MESSAGE`
         *
         * A message related to the battle timer has been sent. The official client displays these
         * messages in red. `inactive` means that the timer is on at the time the message was sent.
         */
        '|inactive|': readonly ['inactive', Message];
        /**
         * `|inactiveoff|MESSAGE`
         *
         * A message related to the battle timer has been sent. The official client displays these
         * messages in red. `inactiveoff` means that the timer is off.
         */
        '|inactiveoff|': readonly ['inactiveoff', Message];
        /**
         * `|upkeep`
         *
         * Signals the upkeep phase of the turn where the number of turns left for field
         * conditions are updated.
         */
        '|upkeep|': readonly ['upkeep'];
        /**
         * `|turn|NUMBER`
         *
         * It is now turn `NUMBER`.
         */
        '|turn|': readonly ['turn', Num];
        /**
         * `|win|USER`
         *
         * `USER` has won the battle.
         */
        '|win|': readonly ['win', Username];
        /**
         * `|tie`
         *
         * The battle has ended in a tie.
         */
        '|tie|': readonly ['tie'];
        /**
         * `|t:|TIMESTAMP`
         *
         * The current UNIX timestamp (the number of seconds since 1970) - useful for determining
         * when events occured in real time.
         */
        '|t:|': readonly ['t:', Timestamp];
    }
    type BattleProgressArgName = keyof BattleProgressArgs;
    type BattleProgressArgType = BattleProgressArgs[BattleProgressArgName];
    interface BattleMajorArgs {
        /**
         * `|move|POKEMON|MOVE|TARGET`
         *
         * The specified Pokémon has used move `MOVE` at `TARGET`. If a move has multiple targets or
         * no target, `TARGET` should be ignored. If a move targets a side, `TARGET` will be a (possibly
         * fainted) Pokémon on that side.
         */
        '|move|': readonly ['move', PokemonIdent, MoveName] | readonly ['move', PokemonIdent, MoveName | 'recharge', PokemonIdent | 'null' | ''];
        /**
         * `|switch|POKEMON|DETAILS|HP STATUS`
         *
         * A Pokémon identified by `POKEMON` has switched in (if there was an old Pokémon in that
         * position, it is switched out).
         *
         * `POKEMON|DETAILS` represents all the information that can be used to tell Pokémon apart. If
         * two pokemon have the same `POKEMON|DETAILS` (which will never happen in any format with
         * Species Clause), you usually won't be able to tell if the same pokemon switched in or a
         * different pokemon switched in.
         *
         * The switched Pokémon has HP `HP`, and status `STATUS`. `HP` is specified as a fraction; if it
         * is your own Pokémon then it will be `CURRENT/MAX`, if not, it will be `/100` if HP Percentage
         * Mod is in effect and `/48` otherwise. `STATUS` can be left blank, or it can be `slp`, `par`,
         * etc.
         */
        '|switch|': readonly ['switch', PokemonIdent, PokemonDetails, PokemonHPStatus];
        /**
         * `|drag|POKEMON|DETAILS|HP STATUS`
         *
         * As `|switch|`, but `switch` means it was intentional, while `drag` means it was unintentional
         * (forced by Whirlwind, Roar, etc).
         */
        '|drag|': readonly ['drag', PokemonIdent, PokemonDetails, PokemonHPStatus];
        /**
         * `|detailschange|POKEMON|DETAILS`
         *
         * The specified Pokémon has changed formes (via Mega Evolution, ability, etc.) to `DETAILS`. If
         * the forme change is permanent (Mega Evolution or a Shaymin-Sky that is frozen), then
         * `|detailschange|` will appear; otherwise, the client will send `|-formechange|`.
         *
         * Syntax is the same as `|switch|`.
         */
        '|detailschange|': readonly ['detailschange', PokemonIdent, PokemonDetails];
        /**
         * `|replace|POKEMON|DETAILS`
         *
         * Illusion has ended for the specified Pokémon. Syntax is the same as `|switch|`, but remember
         * that everything you thought you knew about the previous Pokémon is now wrong.
         *
         * `POKEMON` will be the NEW Pokémon ID - i.e. it will have the nickname of the Zoroark (or
         * other Illusion user).
         */
        '|replace|': readonly ['replace', PokemonIdent, PokemonDetails];
        /**
         * `|swap|POKEMON|POSITION`
         *
         * Moves already active `POKEMON` to active field `POSITION` where the leftmost position is 0
         * and each position to the right counts up by 1.
         */
        '|swap|': readonly ['swap', PokemonIdent, Num] | readonly ['swap', PokemonIdent, PokemonIdent];
        /**
         * `|cant|POKEMON|REASON` or `|cant|POKEMON|REASON|MOVE`
         *
         * The Pokémon `POKEMON` could not perform a move because of the indicated `REASON` (such as
         * paralysis, Disable, etc). Sometimes, the move it was trying to use is given.
         */
        '|cant|': readonly ['cant', PokemonIdent, Reason | AbilityName | EffectName | MoveName] | readonly [
            'cant',
            PokemonIdent,
            Reason | AbilityName | EffectName | MoveName,
            EffectName | MoveName
        ];
        /**
         * `|faint|POKEMON`
         *
         * The Pokémon `POKEMON` has fainted.
         */
        '|faint|': readonly ['faint', PokemonIdent];
        '|message|': readonly ['message', Message];
        '|custom|': readonly ['custom', BattleMinorArgName, PokemonIdent, string];
    }
    type BattleMajorArgName = keyof BattleMajorArgs;
    type BattleMajorArgType = BattleMajorArgs[BattleMajorArgName];
    interface BattleMinorArgs {
        /**
         * `|-formechange|POKEMON|SPECIES`
         *
         * The specified Pokémon has changed formes (via Mega Evolution, ability, etc.) to `SPECIES`. If
         * the forme change is permanent (Mega Evolution or a Shaymin-Sky that is frozen), then
         * `|detailschange|` will appear; otherwise, the client will send `|-formechange|`.
         *
         * Syntax is the same as `|switch|`, though with `SPECIES` in lieu of `DETAILS`.
         */
        '|-formechange|': readonly ['-formechange', PokemonIdent, SpeciesName] | readonly ['-formechange', PokemonIdent, SpeciesName, ''];
        /**
         * `|-fail|POKEMON|ACTION`
         *
         * The specified `ACTION` has failed against the `POKEMON` targetted. The `ACTION` in question
         * should be a move that fails due to its own mechanics. Moves (or effect activations) that fail
         * because they're blocked by another effect should use `-block` instead.
         */
        '|-fail|': readonly ['-fail', PokemonIdent] | readonly ['-fail', PokemonIdent, EffectName | MoveName | StatusName] | readonly ['-fail', PokemonIdent, 'unboost', StatDisplayName | BoostID];
        /**
         * `|-block|POKEMON|EFFECT|MOVE|ATTACKER`
         *
         * An effect targeted at `POKEMON` was blocked by `EFFECT`. This may optionally specify that the
         * effect was a `MOVE` from `ATTACKER`. `[of]SOURCE` will note the owner of the `EFFECT`, in the
         * case that it's not `EFFECT` (for instance, an ally with Aroma Veil.)
         */
        '|-block|': readonly ['-block', PokemonIdent, EffectName] | readonly ['-block', PokemonIdent, EffectName | MoveName, MoveName | ''] | readonly ['-block', PokemonIdent, EffectName, MoveName, PokemonIdent | ''];
        /**
         * `|-notarget|POKEMON`
         *
         * A move has failed due to their being no target Pokémon `POKEMON`. `POKEMON` is not present
         * in Generation 1. This action is specific to Generations 1-4 as in later Generations a failed
         * move will display using `-fail`.
         */
        '|-notarget|': readonly ['-notarget', PokemonIdent] | readonly ['-notarget'];
        /**
         * |-miss|SOURCE|TARGET`
         *
         * The move used by the `SOURCE` Pokémon missed (maybe absent) the `TARGET` Pokémon.
         */
        '|-miss|': readonly ['-miss', PokemonIdent, PokemonIdent] | readonly ['-miss', PokemonIdent];
        /**
         * `|-damage|POKEMON|HP STATUS`
         *
         * The specified Pokémon `POKEMON` has taken damage, and is now at `HP STATUS` (see `|switch|`
         * for details).
         *
         * If `HP` is 0, `STATUS` should be ignored. The current behavior is for `STATUS` to be `fnt`,
         * but this may change and should not be relied upon.
         */
        '|-damage|': readonly ['-damage', PokemonIdent, PokemonHPStatus];
        /**
         * `|-heal|POKEMON|HP STATUS`
         *
         * Same as `-damage`, but the Pokémon has healed damage instead.
         */
        '|-heal|': readonly ['-heal', PokemonIdent, PokemonHPStatus];
        /**
         * `|-sethp|POKEMON|HP`
         *
         * The specified Pokémon `POKEMON` now has `HP` hit points.
         */
        '|-sethp|': readonly ['-sethp', PokemonIdent, PokemonHPStatus] | readonly ['-sethp', PokemonIdent, Num, PokemonIdent, Num];
        /**
         * `|-status|POKEMON|STATUS`
         *
         * The Pokémon `POKEMON` has been inflicted with `STATUS`.
         */
        '|-status|': readonly ['-status', PokemonIdent, StatusName];
        /**
         * `|-curestatus|POKEMON|STATUS`
         *
         * The Pokémon `POKEMON` has recovered from `STATUS`.
         */
        '|-curestatus|': readonly ['-curestatus', PokemonIdent, StatusName];
        /**
         * `|-cureteam|POKEMON`
         *
         * The Pokémon `POKEMON` has used a move that cures its team of status effects, like Heal Bell.
         */
        '|-cureteam|': readonly ['-cureteam', PokemonIdent];
        /**
         * `|-boost|POKEMON|BOOST|AMOUNT`
         *
         * The specified Pokémon `POKEMON` has gained `AMOUNT` in `BOOST`, using the standard rules for
         * Pokémon boosts in-battle.
         */
        '|-boost|': readonly ['-boost', PokemonIdent, BoostID, Num];
        /**
         * `|-unboost|POKEMON|BOOST|AMOUNT`
         *
         * Same as `-boost`, but for negative boosts instead.
         */
        '|-unboost|': readonly ['-unboost', PokemonIdent, BoostID, Num];
        /**
         * `|-setboost|POKEMON|BOOST|AMOUNT`
         *
         * Same as `-boost` and `-unboost`, but `BOOST` is *set* to `AMOUNT` instead of  boosted *by*
         * `AMOUNT`. (For example: Anger Point, Belly Drum)
         */
        '|-setboost|': readonly ['-setboost', PokemonIdent, BoostID, Num];
        /**
         * `|-swapboost|SOURCE|TARGET|BOOSTS`
         *
         * Swaps the boosts from `BOOSTS` between the `SOURCE` Pokémon and `TARGET` Pokémon. (For
         * example: Guard Swap, Heart Swap).
         */
        '|-swapboost|': readonly ['-swapboost', PokemonIdent, PokemonIdent] | readonly ['-swapboost', PokemonIdent, PokemonIdent, BoostIDs];
        /**
         * `|-invertboost|POKEMON`
         *
         * Invert the boosts of the target Pokémon `POKEMON`. (For example: Topsy-Turvy).
         */
        '|-invertboost|': readonly ['-invertboost', PokemonIdent];
        /**
         * `|-clearboost|POKEMON`
         *
         * Clears all of the boosts of the target `POKEMON`. (For example: Clear Smog).
         */
        '|-clearboost|': readonly ['-clearboost', PokemonIdent];
        /**
         * `|-clearallboost`
         *
         * Clears all boosts from all Pokémon on both sides. (For example: Haze).
         */
        '|-clearallboost|': readonly ['-clearallboost'];
        /**
         * `|-clearpositiveboost|TARGET|POKEMON|EFFECT`
         *
         * Clear the positive boosts from the `TARGET` Pokémon due to an `EFFECT` of the `POKEMON`
         * Pokémon. (For example: 'move: Spectral Thief').
         */
        '|-clearpositiveboost|': readonly ['-clearpositiveboost', PokemonIdent, PokemonIdent, EffectName];
        /**
         * `|-clearnegativeboost|POKEMON`
         *
         * Clear the negative boosts from the target Pokémon `POKEMON`. (For example: usually as the
         * result of a `[zeffect]`).
         */
        '|-clearnegativeboost|': readonly ['-clearnegativeboost', PokemonIdent];
        /**
         * `|-copyboost|SOURCE|TARGET`
         *
         * Copy the boosts from `SOURCE` Pokémon to `TARGET` Pokémon (For example: Psych Up).
         */
        '|-copyboost|': readonly ['-copyboost', PokemonIdent, PokemonIdent] | readonly ['-copyboost', PokemonIdent, PokemonIdent, BoostIDs];
        /**
         * `|-weather|WEATHER`
         *
         * Indicates the weather that is currently in effect. If `|[upkeep]` is present, it means that
         * `WEATHER` was active previously and is still in effect that turn. Otherwise, it means that
         * the weather has changed due to a move or ability, or has expired, in which case `WEATHER`
         * will be `none`.
         */
        '|-weather|': readonly ['-weather', Weather | 'none'];
        /**
         * `|-fieldstart|CONDITION`
         *
         * The field condition `CONDITION` has started. Field conditions are all effects that affect the
         * entire field and aren't a weather. (For example: Trick Room, Grassy Terrain).
         */
        '|-fieldstart|': readonly ['-fieldstart', MoveEffectName | FieldCondition];
        /**
         * `|-fieldend|CONDITION`
         *
         * Indicates that the field condition `CONDITION` has ended.
         */
        '|-fieldend|': readonly ['-fieldend', MoveEffectName | FieldCondition];
        /**
         * `|-sidestart|SIDE|CONDITION`
         *
         * A side condition `CONDITION` has started on `SIDE`. Side conditions are all effects that
         * affect one side of the field. (For example: Tailwind, Stealth Rock, Reflect).
         */
        '|-sidestart|': readonly ['-sidestart', Side, MoveEffectName | SideCondition];
        /**
         * `|-sideend|SIDE|CONDITION`
         *
         * Indicates that the side condition `CONDITION` ended for the given `SIDE`.
         */
        '|-sideend|': readonly ['-sideend', Side, MoveEffectName | SideCondition];
        /**
         * `|-swapsideconditions`
         *
         * Swaps side conditions between sides. Used for Court Change.
         */
        '|-swapsideconditions|': readonly ['-swapsideconditions'];
        /**
         * `|-start|POKEMON|EFFECT`
         *
         * A [*volatile* status](
         * https://bulbapedia.bulbagarden.net/wiki/Status_condition#Volatile_status) has been inflicted
         * on the `POKEMON` Pokémon by `EFFECT`. (For example: confusion, Taunt, Substitute).
         */
        '|-start|': readonly ['-start', PokemonIdent, 'Dynamax'] | readonly ['-start', PokemonIdent, 'Dynamax', 'Gmax' | ''] | readonly ['-start', PokemonIdent, EffectName | MoveName] | readonly ['-start', PokemonIdent, EffectName, MoveName] | readonly ['-start', PokemonIdent, 'typechange', Types?] | readonly ['-start', PokemonIdent, 'typeadd', TypeName];
        /**
         * `|-end|POKEMON|EFFECT`
         *
         * The volatile status from `EFFECT` inflicted on the `POKEMON` Pokémon has ended.
         */
        '|-end|': readonly ['-end', PokemonIdent, EffectName | MoveName | AbilityName];
        /**
         * `|-crit|POKEMON`
         *
         * A move has dealt a critical hit against the `POKEMON`.
         */
        '|-crit|': readonly ['-crit', PokemonIdent];
        /**
         * `|-supereffective|POKEMON`
         *
         * A move was super effective against the `POKEMON`.
         */
        '|-supereffective|': readonly ['-supereffective', PokemonIdent];
        /**
         * `|-resisted|POKEMON`
         *
         * A move was not very effective against the `POKEMON`.
         */
        '|-resisted|': readonly ['-resisted', PokemonIdent];
        /**
         * `|-immune|POKEMON`
         *
         * The `POKEMON` was immune to a move.
         */
        '|-immune|': readonly ['-immune', PokemonIdent] | readonly ['-immune', PokemonIdent, 'confusion'];
        /**
         * `|-item|POKEMON|ITEM|[from]EFFECT`
         *
         * The `ITEM` held by the `POKEMON` has been changed or revealed due to a move or ability
         * `EFFECT`.
         *
         * `|-item|POKEMON|ITEM`
         *
         * `POKEMON` has just switched in, and its item `ITEM` is being announced to have a long-term
         * effect (will not use `[from]`). Air Balloon is the only current user of this.
         */
        '|-item|': readonly ['-item', PokemonIdent, ItemName];
        /**
         * `|-enditem|POKEMON|ITEM|[from]EFFECT`
         *
         * The `ITEM` held by `POKEMON` has been destroyed by a move or ability (like Knock Off), and it
         * now holds no item.
         *
         * This will be silent `[silent]` if the item's ownership was changed (with a move or ability
         * like Thief or Trick), even if the move or ability would result in a Pokémon without an item.
         *
         * `|-enditem|POKEMON|ITEM`
         *
         * `POKEMON`'s `ITEM` has destroyed itself (consumed Berries, Air Balloon). If a berry is
         * consumed, it also has an additional modifier `|[eat]` to indicate that it was consumed.
         *
         * Sticky Barb does not announce itself with this or any other message when it changes hands.
         */
        '|-enditem|': readonly ['-enditem', PokemonIdent, ItemName];
        /**
         * `|-ability|POKEMON|ABILITY|[from]EFFECT`
         *
         * The `ABILITY` of the `POKEMON` has been changed due to a move/ability `EFFECT`.
         *
         * Note that Skill Swap does not send this message despite it changing abilities, because it
         * does not reveal abilities when used between allies in a Double or Triple Battle.
         *
         * `|-ability|POKEMON|ABILITY`
         *
         * `POKEMON` has just switched-in, and its ability `ABILITY` is being announced to have a
         * long-term effect (will not use `[from]`).
         *
         * Effects that start at switch-in include Mold Breaker and Neutralizing Gas. It does not
         * include abilities that activate once and don't have any long-term effects, like Intimidate
         * (Intimidate should use `-activate`).
         */
        '|-ability|': readonly ['-ability', PokemonIdent, AbilityName] | readonly ['-ability', PokemonIdent, AbilityName, Side | PokemonIdent | 'boost'] | readonly ['-ability', PokemonIdent, AbilityName, AbilityName, PokemonIdent];
        /**
         * `|-endability|POKEMON`
         *
         * The `POKEMON` has had its ability suppressed by Gastro Acid.
         */
        '|-endability|': readonly ['-endability', PokemonIdent] | readonly ['-endability', PokemonIdent, AbilityName | 'none'];
        /**
         * `|-transform|POKEMON|TARGET`
         *
         * The Pokémon `POKEMON` has transformed into `TARGET` by the move Transform or the ability
         * Imposter.
         */
        '|-transform|': readonly ['-transform', PokemonIdent, PokemonIdent];
        /**
         * `|-mega|POKEMON|MEGASTONE`
         *
         * The Pokémon `POKEMON` used `MEGASTONE` to Mega Evolve.
         */
        '|-mega|': readonly ['-mega', PokemonIdent, SpeciesName, ItemName | ''];
        /**
         * `|-primal|POKEMON|ITEM`
         *
         * The Pokémon `POKEMON` has reverted to its primal forme via `ITEM`.
         */
        '|-primal|': readonly ['-primal', PokemonIdent, ItemName];
        /**
         * `|-burst|POKEMON|SPECIES|ITEM`
         *
         * The Pokémon `POKEMON` has used `ITEM` to Ultra Burst into `SPECIES`.
         */
        '|-burst|': readonly ['-burst', PokemonIdent, SpeciesName, ItemName];
        /**
         * `|-zpower|POKEMON`
         *
         * The Pokémon `POKEMON` has used the z-move version of its move.
         */
        '|-zpower|': readonly ['-zpower', PokemonIdent];
        /**
         * `|-zbroken|POKEMON`
         *
         * A z-move has broken through protect and hit the `POKEMON`.
         */
        '|-zbroken|': readonly ['-zbroken', PokemonIdent];
        /**
         * `|-activate|EFFECT`
         *
         * A miscellaneous effect has activated. This is triggered whenever an effect could not be
         * better described by one of the other minor messages: for example, healing abilities like
         * Water Absorb simply use `-heal`.
         *
         * Items usually activate with `-end`, although items with two messages, like Berries ("POKEMON
         * ate the Leppa Berry! POKEMON restored PP...!"), will send the "ate" message as `-eat`, and
         * the "restored" message as `-activate`.
         */
        '|-activate|': readonly ['-activate', PokemonIdent | '', EffectName] | readonly [
            '-activate',
            PokemonIdent,
            EffectName | AbilityName | MoveName | '',
            ItemName | MoveName | AbilityName | Num | PokemonIdent | ''
        ] | readonly ['-activate', PokemonIdent, EffectName, AbilityName | '', AbilityName | ''];
        '|-fieldactivate|': readonly ['-fieldactivate', EffectName];
        /**
         * `|-hint|MESSAGE`
         *
         * Displays a message in parentheses to the client. Hint messages appear to explain and clarify
         * why certain actions, such as Fake Out and Mat Block failing, have occurred, when there would
         * normally be no in-game messages.
         */
        '|-hint|': readonly ['-hint', Message];
        /**
         * `|-center`
         *
         * Appears in Triple Battles when only one Pokémon remains on each side, to indicate that the
         * Pokémon have been automatically centered.
         */
        '|-center|': readonly ['-center'];
        /**
         * `|-message|MESSAGE`
         *
         * Displays a miscellaneous message to the client. These messages are primarily used for
         * messages from game mods that aren't supported by the client, like rule clauses such as Sleep
         * Clause, or other metagames with custom messages for specific scenarios.
         */
        '|-message|': readonly ['-message', Message];
        /**
         * `|-combine`
         *
         * A move has been combined with another (For example: Fire Pledge).
         */
        '|-combine|': readonly ['-combine'];
        /**
         * `|-waiting|SOURCE|TARGET`
         *
         * The `SOURCE` Pokémon has used a move and is waiting for the `TARGET` Pokémon (For example:
         * Fire Pledge).
         */
        '|-waiting|': readonly ['-waiting', PokemonIdent, PokemonIdent];
        /**
         * `|-prepare|ATTACKER|MOVE|DEFENDER`
         *
         * The `ATTACKER` Pokémon is preparing to use a charge `MOVE` on the `DEFENDER` (For example:
         * Dig, Fly).
         */
        '|-prepare|': readonly ['-prepare', PokemonIdent, MoveName] | readonly ['-prepare', PokemonIdent, MoveName, PokemonIdent];
        /**
         * `|-mustrecharge|POKEMON`
         *
         * The Pokémon `POKEMON` must spend the turn recharging from a previous move.
         */
        '|-mustrecharge|': readonly ['-mustrecharge', PokemonIdent];
        /**
         * `|-hitcount|POKEMON|NUM`
         *
         * A multi-hit move hit the `POKEMON` `NUM` times.
         */
        '|-hitcount|': readonly ['-hitcount', PokemonIdent, Num];
        /**
         * `|-singlemove|POKEMON|MOVE`
         *
         * The Pokémon `POKEMON` used move `MOVE` which causes a temporary effect lasting the duration
         * of the move. (For example: Grudge, Destiny Bond).
         */
        '|-singlemove|': readonly ['-singlemove', PokemonIdent, MoveName];
        /**
         * `|-singleturn|POKEMON|MOVE`
         *
         * The Pokémon `POKEMON` used move `MOVE` which causes a temporary effect lasting the duration
         * of the turn. (For example: Protect, Focus Punch, Roost).
         */
        '|-singleturn|': readonly ['-singleturn', PokemonIdent, MoveEffectName | MoveName];
        '|-anim|': readonly ['-anim', PokemonIdent, AnimationName, PokemonIdent];
        '|-ohko|': readonly ['-ohko'];
        '|-candynamax|': readonly ['-candynamax', Player];
        '|-terastallize|': readonly ['-terastallize', PokemonIdent, TypeName];
    }
    type BattleMinorArgName = keyof BattleMinorArgs;
    type BattleMinorArgType = BattleMinorArgs[BattleMinorArgName];
    type BattleArgs = BattleInitArgs & BattleProgressArgs & BattleMajorArgs & BattleMinorArgs;
    type BattleArgName = BattleInitArgName | BattleProgressArgName | BattleMajorArgName | BattleMinorArgName;
    type BattleArgType = BattleArgs[BattleArgName];
    type BattleArgsKWArgsTypes = {
        'ability': AbilityName;
        'ability2': AbilityName;
        /**
         * `[anim] MOVE2`
         *
         * Use the animation of `MOVE2` instead.
         */
        'anim': MoveName;
        'block': MoveName;
        'broken': true;
        'consumed': true;
        'damage': true;
        'eat': true;
        'fail': true;
        'fatigue': true;
        'forme': true;
        /** `[from] EFFECT` */
        'from': EffectName | MoveName | AbilityName;
        'fromitem': true;
        'heavy': true;
        'item': ItemName;
        /**
         * `[miss]`
         *
         * The move missed.
         */
        'miss': true;
        'move': MoveName | ID;
        'msg': true;
        'name': Nickname;
        'notarget': true;
        'number': Num;
        /** `[of] SOURCE` */
        'of': PokemonIdent | '';
        'ohko': true;
        'persistent': true;
        /**
         * `[silent]`
         *
         * Suppress message.
         */
        'silent': true;
        'source': true;
        'spread': Slots | true;
        /**
         * `[still]`
         *
         * Suppress animation.
         */
        'still': true;
        'thaw': true;
        'upkeep': true;
        'weak': true;
        'weaken': true;
        'wisher': Nickname;
        'zeffect': true;
    } & {
        'already': true;
        'anim': AnimationName | 'prepare';
        'identify': true;
        'interrupt': true;
        'multiple': true;
        'partiallytrapped': true;
        'prepare': true;
    };
    type GeneralKWArgNames = 'from' | 'of' | 'still' | 'silent';
    interface BattleArgsWithKWArgs {
        '|cant|': GeneralKWArgNames;
        '|move|': GeneralKWArgNames | 'anim' | 'miss' | 'notarget' | 'prepare' | 'spread' | 'zeffect';
        '|swap|': GeneralKWArgNames;
        '|switch|': GeneralKWArgNames;
        '|-activate|': GeneralKWArgNames | 'ability' | 'ability2' | 'block' | 'broken' | 'damage' | 'item' | 'move' | 'number' | 'consumed' | 'name' | 'fromitem' | 'source';
        '|-ability|': GeneralKWArgNames | 'move' | 'weaken' | 'fail';
        '|-block|': GeneralKWArgNames;
        '|-boost|': GeneralKWArgNames | 'multiple' | 'zeffect';
        '|-copyboost|': GeneralKWArgNames | 'zeffect';
        '|-clearboost|': GeneralKWArgNames;
        '|-clearallboost|': GeneralKWArgNames | 'zeffect';
        '|-clearnegativeboost|': GeneralKWArgNames | 'zeffect';
        '|-curestatus|': GeneralKWArgNames | 'thaw' | 'msg';
        '|-cureteam|': GeneralKWArgNames;
        '|-damage|': GeneralKWArgNames | 'partiallytrapped';
        '|-end|': GeneralKWArgNames | 'partiallytrapped' | 'interrupt';
        '|-endability|': GeneralKWArgNames;
        '|-enditem|': GeneralKWArgNames | 'eat' | 'move' | 'weaken';
        '|-fail|': GeneralKWArgNames | 'forme' | 'heavy' | 'msg' | 'weak' | 'fail' | 'block';
        '|-fieldstart|': GeneralKWArgNames | 'persistent';
        '|-fieldend|': GeneralKWArgNames;
        '|-formechange|': GeneralKWArgNames | 'msg';
        '|-heal|': GeneralKWArgNames | 'wisher' | 'zeffect';
        '|-immune|': GeneralKWArgNames | 'ohko';
        '|-invertboost|': GeneralKWArgNames;
        '|-item|': GeneralKWArgNames | 'identify';
        '|-miss|': GeneralKWArgNames;
        '|-setboost|': GeneralKWArgNames;
        '|-sethp|': GeneralKWArgNames;
        '|-sidestart|': 'silent' | 'persistent';
        '|-sideend|': GeneralKWArgNames;
        '|-singlemove|': GeneralKWArgNames | 'zeffect';
        '|-singleturn|': GeneralKWArgNames | 'zeffect';
        '|-start|': GeneralKWArgNames | 'already' | 'damage' | 'block' | 'fatigue' | 'upkeep' | 'zeffect';
        '|-status|': GeneralKWArgNames;
        '|-swapboost|': GeneralKWArgNames;
        '|-transform|': GeneralKWArgNames | 'msg';
        '|-unboost|': GeneralKWArgNames | 'multiple' | 'zeffect';
        '|-weather|': GeneralKWArgNames | 'upkeep';
        '|-anim|': 'spread' | 'miss' | 'notarget';
    }
    type BattleArgsWithKWArgName = keyof BattleArgsWithKWArgs;
    type BattleArgsWithKWArgType = BattleArgsWithKWArgs[BattleArgsWithKWArgName];
    type BattleArgKWArgs<T extends BattleArgName> = Readonly<T extends BattleArgsWithKWArgName ? {
        [K in BattleArgsWithKWArgs[T]]?: BattleArgsKWArgsTypes[K] | undefined;
    } : {}>;
    type BattleArgsKWArgs = {
        [T in BattleArgName]: BattleArgKWArgs<T>;
    };
    type BattleArgsKWArgName = BattleArgName;
    type BattleArgsKWArgType = BattleArgsKWArgs[Protocol.BattleArgsWithKWArgName];
    type Args = Readonly<RoomArgs & GlobalArgs & TournamentArgs & MiscArgs & BattleArgs>;
    type ArgName = RoomArgName | GlobalArgName | TournamentArgName | MiscArgName | BattleArgName;
    type ArgType = Args[ArgName];
    type KWArgs = BattleArgsKWArgs;
    type KWArgType = BattleArgsKWArgType;
    type ArgsWithKWArgName = BattleArgsWithKWArgName;
    type ArgsWithKWArgType = BattleArgsKWArgType;
    type Handler<T = void | Promise<void>> = {
        [key in Exclude<ArgName, ArgsWithKWArgName>]?: (m: Args[key]) => T;
    } & {
        [key in ArgsWithKWArgName]?: (a: Args[key], k: KWArgs[key]) => T;
    };
}
declare const Protocol: {
    ARGS: {
        "|init|": 1;
        "|title|": 1;
        "|users|": 1;
        "||": 1;
        "|html|": 1;
        "|uhtml|": 1;
        "|uhtmlchange|": 1;
        "|join|": 1;
        "|leave|": 1;
        "|name|": 1;
        "|chat|": 1;
        "|notify|": 1;
        "|:|": 1;
        "|c:|": 1;
        "|battle|": 1;
        "|popup|": 1;
        "|pm|": 1;
        "|usercount|": 1;
        "|nametaken|": 1;
        "|challstr|": 1;
        "|customgroups|": 1;
        "|updateuser|": 1;
        "|formats|": 1;
        "|updatesearch|": 1;
        "|updatechallenges|": 1;
        "|queryresponse|": 1;
        "|tournament|create|": 1;
        "|tournament|update|": 1;
        "|tournament|updateEnd|": 1;
        "|tournament|error|": 1;
        "|tournament|forceend|": 1;
        "|tournament|join|": 1;
        "|tournament|leave|": 1;
        "|tournament|replace|": 1;
        "|tournament|start|": 1;
        "|tournament|disqualify|": 1;
        "|tournament|battlestart|": 1;
        "|tournament|battleend|": 1;
        "|tournament|end|": 1;
        "|tournament|scouting|": 1;
        "|tournament|autostart|": 1;
        "|tournament|autodq|": 1;
        "|unlink|": 1;
        "|raw|": 1;
        "|warning|": 1;
        "|error|": 1;
        "|bigerror|": 1;
        "|chatmsg|": 1;
        "|chatmsg-raw|": 1;
        "|controlshtml|": 1;
        "|fieldhtml|": 1;
        "|debug|": 1;
        "|deinit|": 1;
        "|pagehtml|": 1;
        "|selectorhtml|": 1;
        "|refresh|": 1;
        "|tempnotify|": 1;
        "|tempnotifyoff|": 1;
        "|noinit|": 1;
        "|hidelines|": 1;
        "|expire|": 1;
        "|askreg|": 1;
        "|player|": 1;
        "|teamsize|": 1;
        "|gametype|": 1;
        "|gen|": 1;
        "|tier|": 1;
        "|rated|": 1;
        "|seed|": 1;
        "|rule|": 1;
        "|clearpoke|": 1;
        "|poke|": 1;
        "|teampreview|": 1;
        "|updatepoke|": 1;
        "|start|": 1;
        "|done|": 1;
        "|request|": 1;
        "|sentchoice|": 1;
        "|inactive|": 1;
        "|inactiveoff|": 1;
        "|upkeep|": 1;
        "|turn|": 1;
        "|win|": 1;
        "|tie|": 1;
        "|t:|": 1;
        "|-formechange|": 1;
        "|-fail|": 1;
        "|-block|": 1;
        "|-notarget|": 1;
        "|-miss|": 1;
        "|-damage|": 1;
        "|-heal|": 1;
        "|-sethp|": 1;
        "|-status|": 1;
        "|-curestatus|": 1;
        "|-cureteam|": 1;
        "|-boost|": 1;
        "|-unboost|": 1;
        "|-setboost|": 1;
        "|-swapboost|": 1;
        "|-invertboost|": 1;
        "|-clearboost|": 1;
        "|-clearallboost|": 1;
        "|-clearpositiveboost|": 1;
        "|-clearnegativeboost|": 1;
        "|-copyboost|": 1;
        "|-weather|": 1;
        "|-fieldstart|": 1;
        "|-fieldend|": 1;
        "|-sidestart|": 1;
        "|-sideend|": 1;
        "|-swapsideconditions|": 1;
        "|-start|": 1;
        "|-end|": 1;
        "|-crit|": 1;
        "|-supereffective|": 1;
        "|-resisted|": 1;
        "|-immune|": 1;
        "|-item|": 1;
        "|-enditem|": 1;
        "|-ability|": 1;
        "|-endability|": 1;
        "|-transform|": 1;
        "|-mega|": 1;
        "|-primal|": 1;
        "|-burst|": 1;
        "|-zpower|": 1;
        "|-zbroken|": 1;
        "|-activate|": 1;
        "|-fieldactivate|": 1;
        "|-hint|": 1;
        "|-center|": 1;
        "|-message|": 1;
        "|-combine|": 1;
        "|-waiting|": 1;
        "|-prepare|": 1;
        "|-mustrecharge|": 1;
        "|-hitcount|": 1;
        "|-singlemove|": 1;
        "|-singleturn|": 1;
        "|-anim|": 1;
        "|-ohko|": 1;
        "|-candynamax|": 1;
        "|-terastallize|": 1;
        "|move|": 1;
        "|switch|": 1;
        "|drag|": 1;
        "|detailschange|": 1;
        "|replace|": 1;
        "|swap|": 1;
        "|cant|": 1;
        "|faint|": 1;
        "|message|": 1;
        "|custom|": 1;
    };
    ARGS_WITH_KWARGS: {
        "|-formechange|": 1;
        "|-fail|": 1;
        "|-block|": 1;
        "|-miss|": 1;
        "|-damage|": 1;
        "|-heal|": 1;
        "|-sethp|": 1;
        "|-status|": 1;
        "|-curestatus|": 1;
        "|-cureteam|": 1;
        "|-boost|": 1;
        "|-unboost|": 1;
        "|-setboost|": 1;
        "|-swapboost|": 1;
        "|-invertboost|": 1;
        "|-clearboost|": 1;
        "|-clearallboost|": 1;
        "|-clearnegativeboost|": 1;
        "|-copyboost|": 1;
        "|-weather|": 1;
        "|-fieldstart|": 1;
        "|-fieldend|": 1;
        "|-sidestart|": 1;
        "|-sideend|": 1;
        "|-start|": 1;
        "|-end|": 1;
        "|-immune|": 1;
        "|-item|": 1;
        "|-enditem|": 1;
        "|-ability|": 1;
        "|-endability|": 1;
        "|-transform|": 1;
        "|-activate|": 1;
        "|-singlemove|": 1;
        "|-singleturn|": 1;
        "|-anim|": 1;
        "|move|": 1;
        "|switch|": 1;
        "|swap|": 1;
        "|cant|": 1;
    };
    parse(data: string): globalThis.Generator<{
        roomid: Protocol.RoomID;
        args: readonly ["init", "chat" | "battle" | "html"] | readonly ["title", Protocol.RoomTitle] | readonly ["users", Protocol.UserList] | readonly ["", Protocol.Message] | readonly ["html", Protocol.HTML] | readonly ["uhtml", Protocol.UHTMLName, Protocol.HTML] | readonly ["uhtmlchange", Protocol.UHTMLName, Protocol.HTML] | readonly ["join", Protocol.Username, boolean] | readonly ["leave", Protocol.Username, boolean] | readonly ["name", Protocol.Username, ID, boolean] | readonly ["chat", Protocol.Username, Protocol.Message] | readonly ["notify", Protocol.NotificationTitle, (Protocol.Message | undefined)?] | readonly ["notify", Protocol.NotificationTitle, Protocol.Message, Protocol.HighlightToken] | readonly [":", Protocol.Timestamp] | ["c:", Protocol.Timestamp, Protocol.Username, Protocol.Message] | readonly ["battle", Protocol.RoomID, Protocol.Username, Protocol.Username] | readonly ["popup", Protocol.Message] | readonly ["pm", Protocol.Username, Protocol.Username, Protocol.Message] | readonly ["usercount", Protocol.Num] | readonly ["nametaken", Protocol.Username, Protocol.Message] | readonly ["challstr", string] | readonly ["customgroups", Protocol.CustomGroupsJSON] | readonly ["updateuser", Protocol.Username, "0" | "1", Protocol.AvatarIdent, Protocol.JSON] | readonly ["formats", Protocol.FormatsList] | readonly ["updatesearch", Protocol.SearchStateJSON] | readonly ["updatechallenges", Protocol.ChallengesJSON] | readonly ["queryresponse", Protocol.QueryType, Protocol.JSON] | readonly ["unlink", Protocol.Username] | readonly ["unlink", "hide", Protocol.Username] | readonly ["raw", Protocol.HTML] | readonly ["warning", Protocol.Message] | readonly ["error", Protocol.Message] | readonly ["bigerror", Protocol.Message] | readonly ["chatmsg", Protocol.Message] | readonly ["chatmsg-raw", Protocol.HTML] | readonly ["controlshtml", Protocol.HTML] | readonly ["fieldhtml", Protocol.HTML] | readonly ["debug", Protocol.Message] | readonly ["deinit"] | readonly ["pagehtml", Protocol.HTML] | readonly ["selectorhtml", Protocol.SelectorName, Protocol.HTML] | readonly ["refresh"] | readonly ["tempnotify", Protocol.TempNotifyName, Protocol.Message] | readonly ["tempnotify", Protocol.TempNotifyName, Protocol.Message, Protocol.Message] | readonly ["tempnotify", Protocol.TempNotifyName, Protocol.Message, Protocol.Message, string] | readonly ["tempnotifyoff", Protocol.TempNotifyName] | readonly ["noinit", "joinfailed" | "namerequired" | "nonexistent", Protocol.Message] | readonly ["noinit", "rename", Protocol.RoomID, Protocol.RoomTitle] | readonly ["hidelines", "hide" | "delete", ID, Protocol.Num] | readonly ["hidelines", "unlink", ID] | readonly ["expire"] | readonly ["expire", Protocol.Message] | readonly ["askreg", ID] | readonly ["tournament", "create", Protocol.Generator, Protocol.Num | "0"] | readonly ["tournament", "update", Protocol.TournamentUpdateJSON] | readonly ["tournament", "updateEnd"] | readonly ["tournament", "error", Protocol.Message] | readonly ["tournament", "forceend"] | readonly ["tournament", "join", Protocol.Username] | readonly ["tournament", "leave", Protocol.Username] | readonly ["tournament", "replace", Protocol.Username, Protocol.Username] | readonly ["tournament", "start", Protocol.Num] | readonly ["tournament", "disqualify", Protocol.Username] | readonly ["tournament", "battlestart", Protocol.Username, Protocol.Username, Protocol.RoomID] | readonly ["tournament", "battleend", Protocol.Username, Protocol.Username, "win" | "loss" | "draw", Protocol.Score, "success"] | readonly ["tournament", "battleend", Protocol.Username, Protocol.Username, "draw", Protocol.Score, "fail"] | readonly ["tournament", "end", Protocol.TournamentEndedJSON] | readonly ["tournament", "scouting", "allow" | "disallow"] | readonly ["tournament", "autostart", "on", Protocol.Num] | readonly ["tournament", "autostart", "off"] | readonly ["tournament", "autodq", "on" | "target", Protocol.Num] | readonly ["tournament", "autodq", "off"] | readonly ["player", SideID] | readonly ["player", SideID, Protocol.Username, "" | Protocol.AvatarIdent, "" | Protocol.Num] | readonly ["teamsize", SideID, Protocol.Num] | readonly ["gametype", GameType] | readonly ["gen", GenerationNum] | readonly ["tier", Protocol.FormatName] | readonly ["rated"] | readonly ["rated", Protocol.Message] | readonly ["seed", Protocol.Seed] | readonly ["rule", Protocol.Rule] | readonly ["clearpoke"] | readonly ["poke", SideID, Protocol.PokemonDetails, "" | "item" | "mail"] | readonly ["teampreview"] | ["teampreview", Protocol.Num] | readonly ["updatepoke", Protocol.PokemonIdent, Protocol.PokemonDetails] | readonly ["start"] | readonly ["done"] | readonly ["request", Protocol.RequestJSON] | readonly ["sentchoice", Protocol.Choice] | readonly ["inactive", Protocol.Message] | readonly ["inactiveoff", Protocol.Message] | readonly ["upkeep"] | readonly ["turn", Protocol.Num] | readonly ["win", Protocol.Username] | readonly ["tie"] | readonly ["t:", Protocol.Timestamp] | readonly ["move", Protocol.PokemonIdent, Protocol.MoveName] | readonly ["move", Protocol.PokemonIdent, Protocol.MoveName | "recharge", "" | Protocol.PokemonIdent | "null"] | readonly ["switch", Protocol.PokemonIdent, Protocol.PokemonDetails, Protocol.PokemonHPStatus] | readonly ["drag", Protocol.PokemonIdent, Protocol.PokemonDetails, Protocol.PokemonHPStatus] | readonly ["detailschange", Protocol.PokemonIdent, Protocol.PokemonDetails] | readonly ["replace", Protocol.PokemonIdent, Protocol.PokemonDetails] | readonly ["swap", Protocol.PokemonIdent, Protocol.Num] | readonly ["swap", Protocol.PokemonIdent, Protocol.PokemonIdent] | readonly ["cant", Protocol.PokemonIdent, Protocol.EffectName | Protocol.AbilityName | Protocol.MoveName | Protocol.Reason] | readonly ["cant", Protocol.PokemonIdent, Protocol.EffectName | Protocol.AbilityName | Protocol.MoveName | Protocol.Reason, Protocol.EffectName | Protocol.MoveName] | readonly ["faint", Protocol.PokemonIdent] | readonly ["message", Protocol.Message] | readonly ["custom", keyof Protocol.BattleMinorArgs, Protocol.PokemonIdent, string] | readonly ["-formechange", Protocol.PokemonIdent, Protocol.SpeciesName] | readonly ["-formechange", Protocol.PokemonIdent, Protocol.SpeciesName, ""] | readonly ["-fail", Protocol.PokemonIdent] | readonly ["-fail", Protocol.PokemonIdent, Protocol.EffectName | Protocol.MoveName | StatusName] | readonly ["-fail", Protocol.PokemonIdent, "unboost", Protocol.StatDisplayName | BoostID] | readonly ["-block", Protocol.PokemonIdent, Protocol.EffectName] | readonly ["-block", Protocol.PokemonIdent, Protocol.EffectName | Protocol.MoveName, "" | Protocol.MoveName] | readonly ["-block", Protocol.PokemonIdent, Protocol.EffectName, Protocol.MoveName, "" | Protocol.PokemonIdent] | readonly ["-notarget", Protocol.PokemonIdent] | readonly ["-notarget"] | readonly ["-miss", Protocol.PokemonIdent, Protocol.PokemonIdent] | readonly ["-miss", Protocol.PokemonIdent] | readonly ["-damage", Protocol.PokemonIdent, Protocol.PokemonHPStatus] | readonly ["-heal", Protocol.PokemonIdent, Protocol.PokemonHPStatus] | readonly ["-sethp", Protocol.PokemonIdent, Protocol.PokemonHPStatus] | readonly ["-sethp", Protocol.PokemonIdent, Protocol.Num, Protocol.PokemonIdent, Protocol.Num] | readonly ["-status", Protocol.PokemonIdent, StatusName] | readonly ["-curestatus", Protocol.PokemonIdent, StatusName] | readonly ["-cureteam", Protocol.PokemonIdent] | readonly ["-boost", Protocol.PokemonIdent, BoostID, Protocol.Num] | readonly ["-unboost", Protocol.PokemonIdent, BoostID, Protocol.Num] | readonly ["-setboost", Protocol.PokemonIdent, BoostID, Protocol.Num] | readonly ["-swapboost", Protocol.PokemonIdent, Protocol.PokemonIdent] | readonly ["-swapboost", Protocol.PokemonIdent, Protocol.PokemonIdent, Protocol.BoostIDs] | readonly ["-invertboost", Protocol.PokemonIdent] | readonly ["-clearboost", Protocol.PokemonIdent] | readonly ["-clearallboost"] | readonly ["-clearpositiveboost", Protocol.PokemonIdent, Protocol.PokemonIdent, Protocol.EffectName] | readonly ["-clearnegativeboost", Protocol.PokemonIdent] | readonly ["-copyboost", Protocol.PokemonIdent, Protocol.PokemonIdent] | readonly ["-copyboost", Protocol.PokemonIdent, Protocol.PokemonIdent, Protocol.BoostIDs] | readonly ["-weather", Weather | "none"] | readonly ["-fieldstart", Protocol.MoveEffectName | FieldCondition] | readonly ["-fieldend", Protocol.MoveEffectName | FieldCondition] | readonly ["-sidestart", Protocol.Side, Protocol.MoveEffectName | SideCondition] | readonly ["-sideend", Protocol.Side, Protocol.MoveEffectName | SideCondition] | readonly ["-swapsideconditions"] | readonly ["-start", Protocol.PokemonIdent, "Dynamax"] | readonly ["-start", Protocol.PokemonIdent, "Dynamax", "" | "Gmax"] | readonly ["-start", Protocol.PokemonIdent, Protocol.EffectName | Protocol.MoveName] | readonly ["-start", Protocol.PokemonIdent, Protocol.EffectName, Protocol.MoveName] | readonly ["-start", Protocol.PokemonIdent, "typechange", (Protocol.Types | undefined)?] | readonly ["-start", Protocol.PokemonIdent, "typeadd", TypeName] | readonly ["-end", Protocol.PokemonIdent, Protocol.EffectName | Protocol.AbilityName | Protocol.MoveName] | readonly ["-crit", Protocol.PokemonIdent] | readonly ["-supereffective", Protocol.PokemonIdent] | readonly ["-resisted", Protocol.PokemonIdent] | readonly ["-immune", Protocol.PokemonIdent] | readonly ["-immune", Protocol.PokemonIdent, "confusion"] | readonly ["-item", Protocol.PokemonIdent, Protocol.ItemName] | readonly ["-enditem", Protocol.PokemonIdent, Protocol.ItemName] | readonly ["-ability", Protocol.PokemonIdent, Protocol.AbilityName] | readonly ["-ability", Protocol.PokemonIdent, Protocol.AbilityName, Protocol.PokemonIdent | Protocol.Side | "boost"] | readonly ["-ability", Protocol.PokemonIdent, Protocol.AbilityName, Protocol.AbilityName, Protocol.PokemonIdent] | readonly ["-endability", Protocol.PokemonIdent] | readonly ["-endability", Protocol.PokemonIdent, Protocol.AbilityName | "none"] | readonly ["-transform", Protocol.PokemonIdent, Protocol.PokemonIdent] | readonly ["-mega", Protocol.PokemonIdent, Protocol.SpeciesName, "" | Protocol.ItemName] | readonly ["-primal", Protocol.PokemonIdent, Protocol.ItemName] | readonly ["-burst", Protocol.PokemonIdent, Protocol.SpeciesName, Protocol.ItemName] | readonly ["-zpower", Protocol.PokemonIdent] | readonly ["-zbroken", Protocol.PokemonIdent] | readonly ["-activate", "" | Protocol.PokemonIdent, Protocol.EffectName] | readonly ["-activate", Protocol.PokemonIdent, "" | Protocol.EffectName | Protocol.AbilityName | Protocol.MoveName, "" | Protocol.PokemonIdent | Protocol.AbilityName | Protocol.ItemName | Protocol.MoveName | Protocol.Num] | readonly ["-activate", Protocol.PokemonIdent, Protocol.EffectName, "" | Protocol.AbilityName, "" | Protocol.AbilityName] | readonly ["-fieldactivate", Protocol.EffectName] | readonly ["-hint", Protocol.Message] | readonly ["-center"] | readonly ["-message", Protocol.Message] | readonly ["-combine"] | readonly ["-waiting", Protocol.PokemonIdent, Protocol.PokemonIdent] | readonly ["-prepare", Protocol.PokemonIdent, Protocol.MoveName] | readonly ["-prepare", Protocol.PokemonIdent, Protocol.MoveName, Protocol.PokemonIdent] | readonly ["-mustrecharge", Protocol.PokemonIdent] | readonly ["-hitcount", Protocol.PokemonIdent, Protocol.Num] | readonly ["-singlemove", Protocol.PokemonIdent, Protocol.MoveName] | readonly ["-singleturn", Protocol.PokemonIdent, Protocol.MoveEffectName | Protocol.MoveName] | readonly ["-anim", Protocol.PokemonIdent, Protocol.AnimationName, Protocol.PokemonIdent] | readonly ["-ohko"] | readonly ["-candynamax", SideID] | readonly ["-terastallize", Protocol.PokemonIdent, TypeName];
        kwArgs: Protocol.BattleArgsKWArgType | {};
    }, void, unknown>;
    key(args: Protocol.ArgType, raw?: boolean): Protocol.ArgName | undefined;
    parseLine(line: string, noDefault?: boolean): Protocol.ArgType | null;
    parseBattleLine(line: string): {
        args: Protocol.BattleArgType;
        kwArgs: Protocol.BattleArgsKWArgType;
    } | {
        args: Protocol.ArgType;
        kwArgs: {};
    };
    parsePokemonIdent(pokemon: Protocol.PokemonIdent): {
        player: SideID;
        position: Protocol.PositionLetter | null;
        name: string;
    };
    parseDetails(name: string, ident: Protocol.PokemonIdent, details?: Protocol.PokemonDetails, output?: DetailedPokemon): DetailedPokemon;
    parseHealth(hpstring: Protocol.PokemonHPStatus, output?: PokemonHealth): PokemonHealth | null;
    parseEffect(effect?: string, fn?: (s: string) => string): {
        name: string;
        type?: 'move' | 'item' | 'ability';
    };
    parseRequest(json: Protocol.RequestJSON): Protocol.Request;
    parseChallenges(json: Protocol.ChallengesJSON): Protocol.Challenges;
    parseSearchState(json: Protocol.SearchStateJSON): Protocol.SearchState;
    parseTournamentUpdate(json: Protocol.TournamentUpdateJSON): Protocol.TournamentUpdate;
    parseCustomGroupsJSON(json: Protocol.CustomGroupsJSON): Protocol.CustomGroups;
    parseNameParts(text: string): {
        group: string;
        name: string;
        away: boolean;
        status: string;
    };
};

export { type AbilityName, type ArgName, type ArgType, type Args, type ArgsWithKWArgName, type ArgsWithKWArgType, type AvatarIdent, type BattleArgKWArgs, type BattleArgName, type BattleArgType, type BattleArgs, type BattleArgsKWArgName, type BattleArgsKWArgType, type BattleArgsKWArgs, type BattleArgsKWArgsTypes, type BattleArgsWithKWArgName, type BattleArgsWithKWArgType, type BattleArgsWithKWArgs, type BattleInitArgName, type BattleInitArgType, type BattleInitArgs, type BattleMajorArgName, type BattleMajorArgType, type BattleMajorArgs, type BattleMinorArgName, type BattleMinorArgType, type BattleMinorArgs, type BattleProgressArgName, type BattleProgressArgType, type BattleProgressArgs, type BoostIDs, type Challenges, type ChallengesJSON, type DetailedPokemon, type EffectName, type FormatName, type FormatsList, type Generator, type GlobalArgName, type GlobalArgType, type GlobalArgs, type HTML, type Handler, type HighlightToken, type ItemName, type JSON, type KWArgType, type KWArgs, type Message, type MiscArgName, type MiscArgType, type MiscArgs, type MoveName, type Nickname, type NotificationTitle, type Num, type PokemonDetails, type PokemonHPStatus, type PokemonHealth, type PokemonIdent, type PokemonSearchID, type PositionLetter, Protocol, type QueryType, type Reason, Request, type RequestJSON, type RoomArgName, type RoomArgs, type RoomArgsType, type RoomID, type RoomInitArgName, type RoomInitArgType, type RoomInitArgs, type RoomMessageArgName, type RoomMessageArgType, type RoomMessageArgs, type RoomTitle, type Rule, type Score, type SearchState, type SearchStateJSON, type Seed, type SelectorName, type Slots, type SpeciesName, type StatDisplayName, type TempNotifyName, type Timestamp, type TournamentArgName, type TournamentArgType, type TournamentArgs, type TournamentEnded, type TournamentEndedJSON, type TournamentUpdate, type TournamentUpdateJSON, type Types, type UHTMLName, type UserList, type Username, ignoreKwArgsSimple };
