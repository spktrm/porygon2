syntax = "proto3";

enum EntityNodeFeature {
  ENTITY_NODE_FEATURE___UNSPECIFIED = 0;
  ENTITY_NODE_FEATURE__SPECIES = 1;
  ENTITY_NODE_FEATURE__ITEM = 2;
  ENTITY_NODE_FEATURE__ITEM_EFFECT = 3;
  ENTITY_NODE_FEATURE__ABILITY = 4;
  ENTITY_NODE_FEATURE__GENDER = 5;
  ENTITY_NODE_FEATURE__ACTIVE = 6;
  ENTITY_NODE_FEATURE__FAINTED = 7;
  ENTITY_NODE_FEATURE__HP = 8;
  ENTITY_NODE_FEATURE__MAXHP = 9;
  ENTITY_NODE_FEATURE__HP_RATIO = 10;
  ENTITY_NODE_FEATURE__STATUS = 11;
  ENTITY_NODE_FEATURE__TOXIC_TURNS = 12;
  ENTITY_NODE_FEATURE__SLEEP_TURNS = 13;
  ENTITY_NODE_FEATURE__BEING_CALLED_BACK = 14;
  ENTITY_NODE_FEATURE__TRAPPED = 15;
  ENTITY_NODE_FEATURE__NEWLY_SWITCHED = 16;
  ENTITY_NODE_FEATURE__LEVEL = 17;
  ENTITY_NODE_FEATURE__MOVEID0 = 18;
  ENTITY_NODE_FEATURE__MOVEID1 = 19;
  ENTITY_NODE_FEATURE__MOVEID2 = 20;
  ENTITY_NODE_FEATURE__MOVEID3 = 21;
  ENTITY_NODE_FEATURE__MOVEPP0 = 22;
  ENTITY_NODE_FEATURE__MOVEPP1 = 23;
  ENTITY_NODE_FEATURE__MOVEPP2 = 24;
  ENTITY_NODE_FEATURE__MOVEPP3 = 25;
  ENTITY_NODE_FEATURE__HAS_STATUS = 26;
  ENTITY_NODE_FEATURE__BOOST_ATK_VALUE = 27;
  ENTITY_NODE_FEATURE__BOOST_DEF_VALUE = 28;
  ENTITY_NODE_FEATURE__BOOST_SPA_VALUE = 29;
  ENTITY_NODE_FEATURE__BOOST_SPD_VALUE = 30;
  ENTITY_NODE_FEATURE__BOOST_SPE_VALUE = 31;
  ENTITY_NODE_FEATURE__BOOST_ACCURACY_VALUE = 32;
  ENTITY_NODE_FEATURE__BOOST_EVASION_VALUE = 33;

  // Stored as a 160 bit binary
  //
  ENTITY_NODE_FEATURE__VOLATILES0 = 34; 
  ENTITY_NODE_FEATURE__VOLATILES1 = 35; 
  ENTITY_NODE_FEATURE__VOLATILES2 = 36; 
  ENTITY_NODE_FEATURE__VOLATILES3 = 37; 
  ENTITY_NODE_FEATURE__VOLATILES4 = 38; 
  ENTITY_NODE_FEATURE__VOLATILES5 = 39; 
  ENTITY_NODE_FEATURE__VOLATILES6 = 40; 
  ENTITY_NODE_FEATURE__VOLATILES7 = 41; 
  ENTITY_NODE_FEATURE__VOLATILES8 = 42; 
  //
  
  ENTITY_NODE_FEATURE__SIDE = 43;
  ENTITY_NODE_FEATURE__TYPECHANGE0 = 44;
  ENTITY_NODE_FEATURE__TYPECHANGE1 = 45;

  ENTITY_NODE_FEATURE__NUM_MOVES = 46;
  ENTITY_NODE_FEATURE__IS_PUBLIC = 47;
  ENTITY_NODE_FEATURE__LAST_MOVE = 48;

  // Evs
  ENTITY_NODE_FEATURE__EV_HP = 49;
  ENTITY_NODE_FEATURE__EV_ATK = 50;
  ENTITY_NODE_FEATURE__EV_DEF = 51;
  ENTITY_NODE_FEATURE__EV_SPA = 52;
  ENTITY_NODE_FEATURE__EV_SPD = 53;
  ENTITY_NODE_FEATURE__EV_SPE = 54;
  // Ivs
  ENTITY_NODE_FEATURE__IV_HP = 55;
  ENTITY_NODE_FEATURE__IV_ATK = 56;
  ENTITY_NODE_FEATURE__IV_DEF = 57;
  ENTITY_NODE_FEATURE__IV_SPA = 58;
  ENTITY_NODE_FEATURE__IV_SPD = 59;
  ENTITY_NODE_FEATURE__IV_SPE = 60;
  // Nature
  ENTITY_NODE_FEATURE__NATURE = 61;
  // TeraType
  ENTITY_NODE_FEATURE__TERA_TYPE = 62;
  ENTITY_NODE_FEATURE__TERASTALLIZED = 63;
  // Mega
  ENTITY_NODE_FEATURE__MEGA = 64;
  // Primal
  ENTITY_NODE_FEATURE__PRIMAL = 65;
}


enum MovesetHasPP {
  MOVESET_HAS_PP___UNSPECIFIED = 0;
  MOVESET_HAS_PP__YES = 1;
  MOVESET_HAS_PP__NO = 2;
}


enum MovesetFeature {
  MOVESET_FEATURE___UNSPECIFIED = 0;
  MOVESET_FEATURE__PP_RATIO = 1;
  MOVESET_FEATURE__MOVE_ID = 2;
  MOVESET_FEATURE__PP = 3;
  MOVESET_FEATURE__MAXPP = 4;
  MOVESET_FEATURE__HAS_PP = 5;
  MOVESET_FEATURE__ACTION_TYPE = 6;
  MOVESET_FEATURE__ENTITY_IDX = 7;
}


enum EntityEdgeFeature {
  ENTITY_EDGE_FEATURE___UNSPECIFIED = 0; // Major argument index
  ENTITY_EDGE_FEATURE__MAJOR_ARG = 1; // Major argument index
  ENTITY_EDGE_FEATURE__MINOR_ARG0 = 2; // bits 0-15 as 64-bit binary
  ENTITY_EDGE_FEATURE__MINOR_ARG1 = 3; // bits 16-31 as 64-bit binary
  ENTITY_EDGE_FEATURE__MINOR_ARG2 = 4; // bits 32-47 as 64-bit binary
  ENTITY_EDGE_FEATURE__MINOR_ARG3 = 5; // bits 48-63 as 64-bit binary
  ENTITY_EDGE_FEATURE__ITEM_TOKEN = 6; // Represents the item used
  ENTITY_EDGE_FEATURE__ABILITY_TOKEN = 7; // Represents the ability used
  ENTITY_EDGE_FEATURE__NUM_FROM_TYPES = 8; // Represents the number of types
  ENTITY_EDGE_FEATURE__FROM_TYPE_TOKEN0 = 9; // Represents the type of the move or action
  ENTITY_EDGE_FEATURE__FROM_TYPE_TOKEN1 = 10; // Represents the type of the move or action
  ENTITY_EDGE_FEATURE__FROM_TYPE_TOKEN2 = 11; // Represents the type of the move or action
  ENTITY_EDGE_FEATURE__FROM_TYPE_TOKEN3 = 12; // Represents the type of the move or action
  ENTITY_EDGE_FEATURE__FROM_TYPE_TOKEN4 = 13; // Represents the type of the move or action
  ENTITY_EDGE_FEATURE__NUM_FROM_SOURCES = 14; // Represents the number of sources
  ENTITY_EDGE_FEATURE__FROM_SOURCE_TOKEN0 = 15; // Represents the source of the move or action
  ENTITY_EDGE_FEATURE__FROM_SOURCE_TOKEN1 = 16; // Represents the source of the move or action
  ENTITY_EDGE_FEATURE__FROM_SOURCE_TOKEN2 = 17; // Represents the source of the move or action
  ENTITY_EDGE_FEATURE__FROM_SOURCE_TOKEN3 = 18; // Represents the source of the move or action
  ENTITY_EDGE_FEATURE__FROM_SOURCE_TOKEN4 = 19; // Represents the source of the move or action
  ENTITY_EDGE_FEATURE__DAMAGE_RATIO = 20; // floor(1024 * hpRatio)
  ENTITY_EDGE_FEATURE__HEAL_RATIO = 21; // floor(1024 * hpRatio)
  ENTITY_EDGE_FEATURE__EFFECT_TOKEN = 22; // Represents the effect applied
  ENTITY_EDGE_FEATURE__BOOST_ATK_VALUE = 23; // Boost to Attack stat
  ENTITY_EDGE_FEATURE__BOOST_DEF_VALUE = 24; // Boost to Defense stat
  ENTITY_EDGE_FEATURE__BOOST_SPA_VALUE = 25; // Boost to Special Attack stat
  ENTITY_EDGE_FEATURE__BOOST_SPD_VALUE = 26; // Boost to Special Defense stat
  ENTITY_EDGE_FEATURE__BOOST_SPE_VALUE = 27; // Boost to Speed stat
  ENTITY_EDGE_FEATURE__BOOST_ACCURACY_VALUE = 28; // Boost to Accuracy stat
  ENTITY_EDGE_FEATURE__BOOST_EVASION_VALUE = 29; // Boost to Evasion stat
  ENTITY_EDGE_FEATURE__STATUS_TOKEN = 30; // Represents the status condition
  ENTITY_EDGE_FEATURE__MOVE_TOKEN = 31; // Move Id of action   
  ENTITY_EDGE_FEATURE__HIT_COUNT = 32; // Hit count
}


enum FieldFeature {
  FIELD_FEATURE___UNSPECIFIED = 0;
  FIELD_FEATURE__WEATHER_ID = 1;
  FIELD_FEATURE__WEATHER_MIN_DURATION = 2;
  FIELD_FEATURE__WEATHER_MAX_DURATION = 3;
  FIELD_FEATURE__TERRAIN_ID = 4;
  FIELD_FEATURE__TERRAIN_MIN_DURATION = 5;
  FIELD_FEATURE__TERRAIN_MAX_DURATION = 6;
  FIELD_FEATURE__PSEUDOWEATHER_ID = 7;
  FIELD_FEATURE__PSEUDOWEATHER_MIN_DURATION = 8;
  FIELD_FEATURE__PSEUDOWEATHER_MAX_DURATION = 9;
  FIELD_FEATURE__MY_SIDECONDITIONS0 = 10; // Stored as 32-bit binary
  FIELD_FEATURE__MY_SIDECONDITIONS1 = 11; // Stored as 32-bit binary
  FIELD_FEATURE__MY_TOXIC_SPIKES = 12; // Number of Toxic Spikes layers
  FIELD_FEATURE__MY_SPIKES = 13; // Number of Spikes layers
  FIELD_FEATURE__OPP_SIDECONDITIONS0 = 14; // Stored as 32-bit binary
  FIELD_FEATURE__OPP_SIDECONDITIONS1 = 15; // Stored as 32-bit binary
  FIELD_FEATURE__OPP_TOXIC_SPIKES = 16; // Number of Toxic Spikes layers
  FIELD_FEATURE__OPP_SPIKES = 17; // Number of Spikes layers
  FIELD_FEATURE__REQUEST_COUNT = 18;
  FIELD_FEATURE__VALID = 19;
  FIELD_FEATURE__INDEX = 20;
  FIELD_FEATURE__TURN_VALUE = 21;
  FIELD_FEATURE__TURN_ORDER_VALUE = 22;
  FIELD_FEATURE__TYPE = 23;
}


enum InfoFeature {
  INFO_FEATURE___UNSPECIFIED = 0;
  INFO_FEATURE__DONE = 1;
  INFO_FEATURE__PLAYER_INDEX = 2;
  INFO_FEATURE__TURN = 3;
  INFO_FEATURE__WIN_REWARD = 4;
  INFO_FEATURE__REQUEST_COUNT = 5;
}


enum ActionType {
  ACTION_TYPE___UNSPECIFIED = 0;
  ACTION_TYPE__MOVE = 1;
  ACTION_TYPE__SWITCH = 2;
  ACTION_TYPE__TEAMPREVIEW = 3;
  ACTION_TYPE__DEFAULT = 4;
}


enum ActionMaskFeature {
  ACTION_MASK_FEATURE___UNSPECIFIED = 0;
  ACTION_MASK_FEATURE__CAN_MOVE = 1; 
  ACTION_MASK_FEATURE__CAN_SWITCH = 2;
  ACTION_MASK_FEATURE__CAN_TEAMPREVIEW = 3;
  ACTION_MASK_FEATURE__MOVE_SLOT_1 = 4; 
  ACTION_MASK_FEATURE__MOVE_SLOT_2 = 5; 
  ACTION_MASK_FEATURE__MOVE_SLOT_3 = 6; 
  ACTION_MASK_FEATURE__MOVE_SLOT_4 = 7; 
  ACTION_MASK_FEATURE__SWITCH_SLOT_1 = 8; 
  ACTION_MASK_FEATURE__SWITCH_SLOT_2 = 9; 
  ACTION_MASK_FEATURE__SWITCH_SLOT_3 = 10; 
  ACTION_MASK_FEATURE__SWITCH_SLOT_4 = 11; 
  ACTION_MASK_FEATURE__SWITCH_SLOT_5 = 12; 
  ACTION_MASK_FEATURE__SWITCH_SLOT_6 = 13; 
  ACTION_MASK_FEATURE__CAN_NORMAL = 14; 
  ACTION_MASK_FEATURE__CAN_MEGA = 15; 
  ACTION_MASK_FEATURE__CAN_ZMOVE = 16; 
  ACTION_MASK_FEATURE__CAN_MAX = 17; 
  ACTION_MASK_FEATURE__CAN_TERA = 18; 
}


enum PackedSetFeature {
  PACKED_SET_FEATURE___UNSPECIFIED = 0;
  PACKED_SET_FEATURE__SPECIES = 1;
  PACKED_SET_FEATURE__ITEM = 2;
  PACKED_SET_FEATURE__ABILITY = 3;
  PACKED_SET_FEATURE__MOVE1 = 4;
  PACKED_SET_FEATURE__MOVE2 = 5;
  PACKED_SET_FEATURE__MOVE3 = 6;
  PACKED_SET_FEATURE__MOVE4 = 7;
  PACKED_SET_FEATURE__NATURE = 8;
  PACKED_SET_FEATURE__GENDER = 9;
  PACKED_SET_FEATURE__HP_EV = 10; 
  PACKED_SET_FEATURE__ATK_EV = 11;
  PACKED_SET_FEATURE__DEF_EV = 12;
  PACKED_SET_FEATURE__SPA_EV = 13;
  PACKED_SET_FEATURE__SPD_EV = 14;
  PACKED_SET_FEATURE__SPE_EV = 15;
  PACKED_SET_FEATURE__HP_IV = 16;
  PACKED_SET_FEATURE__ATK_IV = 17;
  PACKED_SET_FEATURE__DEF_IV = 18;
  PACKED_SET_FEATURE__SPA_IV = 19;
  PACKED_SET_FEATURE__SPD_IV = 20;
  PACKED_SET_FEATURE__SPE_IV = 21;
  PACKED_SET_FEATURE__HIDDENPOWERTYPE = 22;
  PACKED_SET_FEATURE__TERATYPE = 23;
  PACKED_SET_FEATURE__LEVEL = 24;
  PACKED_SET_FEATURE__HAPPINESS = 25;
}